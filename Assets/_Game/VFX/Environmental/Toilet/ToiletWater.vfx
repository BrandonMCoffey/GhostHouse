%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &114340500867371532
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: d01270efd3285ea4a9d6c555cb0a8027, type: 3}
  m_Name: VFXUI
  m_EditorClassIdentifier: 
  groupInfos: []
  stickyNoteInfos: []
  systemInfos: []
  categories: []
  uiBounds:
    serializedVersion: 2
    x: 459
    y: -133
    width: 908
    height: 1388
--- !u!114 &114350483966674976
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 7d4c867f6b72b714dbb5fd1780afe208, type: 3}
  m_Name: ToiletWater
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614555}
  - {fileID: 8926484042661614558}
  - {fileID: 8926484042661614583}
  - {fileID: 8926484042661614613}
  - {fileID: 8926484042661614615}
  - {fileID: 8926484042661614625}
  - {fileID: 8926484042661614659}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_UIInfos: {fileID: 114340500867371532}
  m_ParameterInfo:
  - name: Scale
    path: Scale
    tooltip: 
    sheetType: m_Float
    realType: Single
    defaultValue:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 4
    min: -Infinity
    max: Infinity
    descendantCount: 0
  m_GraphVersion: 4
  m_saved: 1
  m_SubgraphDependencies: []
  m_CategoryPath: 
--- !u!2058629511 &8926484042661614527
VisualEffectResource:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_Name: ToiletWater
  m_Graph: {fileID: 114350483966674976}
  m_ShaderSources:
  - compute: 1
    name: '[System 1]Initialize Particle'
    source: "#pragma kernel CSMain\r\n#define NB_THREADS_PER_GROUP 64\n#define HAS_ATTRIBUTES
      1\n#define VFX_PASSDEPTH_ACTUAL (0)\n#define VFX_PASSDEPTH_MOTION_VECTOR (1)\n#define
      VFX_PASSDEPTH_SELECTION (2)\n#define VFX_USE_LIFETIME_CURRENT 1\n#define VFX_USE_SCALEX_CURRENT
      1\n#define VFX_USE_SCALEY_CURRENT 1\n#define VFX_USE_SCALEZ_CURRENT 1\n#define
      VFX_USE_ANGLEX_CURRENT 1\n#define VFX_USE_ANGLEY_CURRENT 1\n#define VFX_USE_ANGLEZ_CURRENT
      1\n#define VFX_USE_SEED_CURRENT 1\n#define VFX_USE_ALIVE_CURRENT 1\n#define
      VFX_USE_AGE_CURRENT 1\n#define VFX_LOCAL_SPACE 1\n#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl\"\n\n\r\nCBUFFER_START(parameters)\n   
      float3 Scale_b;\n    uint PADDING_0;\nCBUFFER_END\n\nstruct Attributes\n{\n   
      float lifetime;\n    float scaleX;\n    float scaleY;\n    float scaleZ;\n   
      float angleX;\n    float angleY;\n    float angleZ;\n    uint seed;\n    bool
      alive;\n    float age;\n};\n\nstruct SourceAttributes\n{\n};\n\n\n\r\n\r\n#define
      USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)\r\n\r\nRWByteAddressBuffer
      attributeBuffer;\r\nByteAddressBuffer sourceAttributeBuffer;\r\n\r\nCBUFFER_START(initParams)\r\n#if
      !VFX_USE_SPAWNER_FROM_GPU\r\n    uint nbSpawned;\t\t\t\t\t// Numbers of particle
      spawned\r\n    uint spawnIndex;\t\t\t\t// Index of the first particle spawned\r\n   
      uint dispatchWidth;\r\n#else\r\n    uint offsetInAdditionalOutput;\r\n\tuint
      nbMax;\r\n#endif\r\n\tuint systemSeed;\r\nCBUFFER_END\r\n\r\n#if USE_DEAD_LIST\r\nRWStructuredBuffer<uint>
      deadListIn;\r\nByteAddressBuffer deadListCount; // This is bad to use a SRV
      to fetch deadList count but Unity API currently prevent from copying to CB\r\n#endif\r\n\r\n#if
      VFX_USE_SPAWNER_FROM_GPU\r\nStructuredBuffer<uint> eventList;\r\nByteAddressBuffer
      inputAdditional;\r\n#endif\r\n\r\n#if HAS_STRIPS\r\nRWBuffer<uint> stripDataBuffer;\r\n#endif\r\n\r\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl\"\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\n\r\n\r\nvoid
      SetAttribute_F0142CB9(inout float lifetime, float Lifetime) /*attribute:lifetime
      Composition:Overwrite Source:Slot Random:Off channels:XYZ */\n{\n    lifetime
      = Lifetime;\n}\nvoid SetAttribute_D5151642(inout float scaleX, inout float
      scaleY, inout float scaleZ, float3 Scale) /*attribute:scale Composition:Overwrite
      Source:Slot Random:Off channels:XYZ */\n{\n    scaleX = Scale.x;\n    scaleY
      = Scale.y;\n    scaleZ = Scale.z;\n}\nvoid SetAttribute_44ED00F8(inout float
      angleX, inout float angleY, inout float angleZ, inout uint seed, float3 A,
      float3 B) /*attribute:angle Composition:Add Source:Slot Random:Uniform channels:XYZ
      */\n{\n    angleX += lerp(A.x,B.x,RAND);\n    angleY += lerp(A.y,B.y,RAND);\n   
      angleZ += lerp(A.z,B.z,RAND);\n}\n\n\r\n\r\n#if HAS_STRIPS\r\nbool GetParticleIndex(inout
      uint particleIndex, uint stripIndex)\r\n{\r\n\tuint relativeIndex;\r\n\tInterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX,
      stripIndex), 1, relativeIndex);\r\n\tif (relativeIndex >= PARTICLE_PER_STRIP_COUNT)
      // strip is full\r\n\t{\r\n\t\tInterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX,
      stripIndex), -1); // Remove previous increment\r\n\t\treturn false;\r\n\t}\r\n\r\n\tparticleIndex
      = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, stripIndex)
      + relativeIndex) % PARTICLE_PER_STRIP_COUNT);\r\n    return true;\r\n}\r\n#endif\r\n\r\n[numthreads(NB_THREADS_PER_GROUP,1,1)]\r\nvoid
      CSMain(uint3 groupId          : SV_GroupID,\r\n            uint3 groupThreadId   
      : SV_GroupThreadID)\r\n{\r\n    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;\r\n#if
      !VFX_USE_SPAWNER_FROM_GPU\r\n    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;\r\n#endif\r\n\r\n#if
      VFX_USE_SPAWNER_FROM_GPU\r\n    uint maxThreadId = inputAdditional.Load((offsetInAdditionalOutput
      * 2 + 0) << 2);\r\n    uint currentSpawnIndex = inputAdditional.Load((offsetInAdditionalOutput
      * 2 + 1) << 2) - maxThreadId;\r\n#else\r\n    uint maxThreadId = nbSpawned;\r\n   
      uint currentSpawnIndex = spawnIndex;\r\n#endif\r\n\r\n#if USE_DEAD_LIST\r\n   
      maxThreadId = min(maxThreadId, deadListCount.Load(0x0));\r\n#elif VFX_USE_SPAWNER_FROM_GPU\r\n   
      maxThreadId = min(maxThreadId, nbMax); //otherwise, nbSpawned already clamped
      on CPU\r\n#endif\r\n\r\n    if (id < maxThreadId)\r\n    {\r\n#if VFX_USE_SPAWNER_FROM_GPU\r\n       
      int sourceIndex = eventList[id];\r\n#endif\r\n\t\tuint particleIndex = id +
      currentSpawnIndex;\r\n\t\t\r\n#if !VFX_USE_SPAWNER_FROM_GPU\r\n        int
      sourceIndex = 0;\n        /*//Loop with 1 iteration generate a wrong IL Assembly
      (and actually, useless code)\n        uint currentSumSpawnCount = 0u;\n       
      for (sourceIndex=0; sourceIndex<1; sourceIndex++)\n        {\n            currentSumSpawnCount
      += uint(asfloat(sourceAttributeBuffer.Load((sourceIndex * 0x1 + 0x0) << 2)));\n           
      if (id < currentSumSpawnCount)\n            {\n                break;\n           
      }\n        }\n        */\n        \n\r\n#endif\r\n\r\n\t\tAttributes attributes
      = (Attributes)0;\r\n\t\tSourceAttributes sourceAttributes = (SourceAttributes)0;\r\n\t\t\r\n       
      attributes.lifetime = (float)1;\n        attributes.scaleX = (float)1;\n       
      attributes.scaleY = (float)1;\n        attributes.scaleZ = (float)1;\n       
      attributes.angleX = (float)0;\n        attributes.angleY = (float)0;\n       
      attributes.angleZ = (float)0;\n        attributes.seed = (uint)0;\n       
      attributes.alive = (bool)true;\n        attributes.age = (float)0;\n       
      \n\r\n#if VFX_USE_PARTICLEID_CURRENT\r\n         attributes.particleId = particleIndex;\r\n#endif\r\n#if
      VFX_USE_SEED_CURRENT\r\n        attributes.seed = WangHash(particleIndex ^
      systemSeed);\r\n#endif\r\n#if VFX_USE_SPAWNINDEX_CURRENT\r\n        attributes.spawnIndex
      = id;\r\n#endif\r\n#if HAS_STRIPS\r\n#if !VFX_USE_SPAWNER_FROM_GPU\r\n\t\t\r\n#else\r\n       
      uint stripIndex = sourceIndex;\r\n#endif\r\n\t\tstripIndex = min(stripIndex,
      STRIP_COUNT);\r\n\r\n        if (!GetParticleIndex(particleIndex, stripIndex))\r\n           
      return;\r\n\r\n        const StripData stripData = GetStripDataFromStripIndex(stripIndex,
      PARTICLE_PER_STRIP_COUNT);\r\n\t\tInitStripAttributes(particleIndex, attributes,
      stripData);\r\n\t\t// TODO Change seed to be sure we're deterministic on random
      with strip\r\n#endif\r\n        \r\n        {\n            SetAttribute_F0142CB9(
      /*inout */attributes.lifetime, (float)1.5);\n        }\n        SetAttribute_D5151642(
      /*inout */attributes.scaleX,  /*inout */attributes.scaleY,  /*inout */attributes.scaleZ,
      Scale_b);\n        {\n            SetAttribute_44ED00F8( /*inout */attributes.angleX, 
      /*inout */attributes.angleY,  /*inout */attributes.angleZ,  /*inout */attributes.seed,
      float3(0, 270, 0), float3(0, 0, 0));\n        }\n        \n\r\n\t\t\r\n#if
      VFX_USE_ALIVE_CURRENT\r\n        if (attributes.alive)\r\n#endif       \r\n       
      {\r\n#if USE_DEAD_LIST\r\n\t        uint deadIndex = deadListIn.DecrementCounter();\r\n           
      uint index = deadListIn[deadIndex];\r\n#else\r\n            uint index = particleIndex;\r\n#endif\r\n           
      attributeBuffer.Store((index * 0x1 + 0x0) << 2,asuint(attributes.lifetime));\n           
      attributeBuffer.Store((index * 0x6 + 0x20) << 2,asuint(attributes.scaleX));\n           
      attributeBuffer.Store((index * 0x6 + 0x21) << 2,asuint(attributes.scaleY));\n           
      attributeBuffer.Store((index * 0x6 + 0x22) << 2,asuint(attributes.scaleZ));\n           
      attributeBuffer.Store((index * 0x6 + 0x23) << 2,asuint(attributes.angleX));\n           
      attributeBuffer.Store((index * 0x6 + 0x24) << 2,asuint(attributes.angleY));\n           
      attributeBuffer.Store((index * 0x6 + 0x25) << 2,asuint(attributes.angleZ));\n           
      attributeBuffer.Store((index * 0x2 + 0xE0) << 2,uint(attributes.alive));\n           
      attributeBuffer.Store((index * 0x2 + 0xE1) << 2,asuint(attributes.age));\n           
      \n\r\n        }\r\n    }\r\n}\r\n"
  - compute: 1
    name: '[System 1]Update Particle'
    source: "#pragma kernel CSMain\r\n#define NB_THREADS_PER_GROUP 64\n#define HAS_ATTRIBUTES
      1\n#define VFX_PASSDEPTH_ACTUAL (0)\n#define VFX_PASSDEPTH_MOTION_VECTOR (1)\n#define
      VFX_PASSDEPTH_SELECTION (2)\n#define VFX_USE_LIFETIME_CURRENT 1\n#define VFX_USE_ALIVE_CURRENT
      1\n#define VFX_USE_AGE_CURRENT 1\n#define VFX_LOCAL_SPACE 1\n#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl\"\n\n\r\nCBUFFER_START(parameters)\n   
      float deltaTime_a;\n    uint3 PADDING_0;\nCBUFFER_END\n\nstruct Attributes\n{\n   
      float lifetime;\n    bool alive;\n    float age;\n};\n\nstruct SourceAttributes\n{\n};\n\n\n\r\n\r\n#define
      USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)\r\n\r\nRWByteAddressBuffer
      attributeBuffer;\r\n\r\n#if USE_DEAD_LIST\r\nRWStructuredBuffer<uint> deadListOut;\r\n#endif\r\n\r\n#if
      VFX_HAS_INDIRECT_DRAW\r\nRWStructuredBuffer<uint> indirectBuffer;\r\n#endif\r\n\r\n#if
      HAS_STRIPS\r\nRWBuffer<uint> stripDataBuffer;\r\n#endif\r\n\r\n#if VFX_USE_STRIPALIVE_CURRENT\r\nBuffer<uint>
      attachedStripDataBuffer;\r\n#endif\r\n\r\nCBUFFER_START(updateParams)\r\n   
      uint nbMax;\r\n\tuint dispatchWidth;\r\n\tuint systemSeed;\r\nCBUFFER_END\r\n\r\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl\"\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\n\r\n\r\nvoid
      Age(inout float age, float deltaTime)\n{\n    age += deltaTime;\n}\nvoid Reap(float
      age, float lifetime, inout bool alive)\n{\n    if(age > lifetime) { alive =
      false; }\n}\n\n\r\n\r\n[numthreads(NB_THREADS_PER_GROUP,1,1)]\r\nvoid CSMain(uint3
      groupId          : SV_GroupID,\r\n            uint3 groupThreadId    : SV_GroupThreadID)\r\n{\r\n\tuint
      id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP + groupId.y * dispatchWidth
      * NB_THREADS_PER_GROUP;\r\n\tuint index = id;\r\n\tif (id < nbMax)\r\n\t{\r\n       
      Attributes attributes = (Attributes)0;\r\n\t\tSourceAttributes sourceAttributes
      = (SourceAttributes)0;\r\n\r\n#if VFX_USE_ALIVE_CURRENT\r\n\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\n\r\n\t\tif (attributes.alive)\r\n\t\t{\r\n\t\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\t\tattributes.age
      = asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\t\n\r\n\r\n//
      Initialize built-in needed attributes\r\n#if VFX_USE_OLDPOSITION_CURRENT\r\n\t\t\tattributes.oldPosition
      = attributes.position;\r\n#endif\r\n#if HAS_STRIPS\r\n            const StripData
      stripData = GetStripDataFromParticleIndex(index, PARTICLE_PER_STRIP_COUNT);\r\n           
      InitStripAttributes(index, attributes, stripData);\r\n#endif\r\n\t\t\t\r\n\t\t\tAge(
      /*inout */attributes.age, deltaTime_a);\n\t\t\tReap(attributes.age, attributes.lifetime, 
      /*inout */attributes.alive);\n\t\t\t\n\r\n\r\n\t\t\tif (attributes.alive)\r\n\t\t\t{\r\n\t\t\t\tattributeBuffer.Store((index
      * 0x2 + 0xE1) << 2,asuint(attributes.age));\n\t\t\t\t\n\r\n#if VFX_HAS_INDIRECT_DRAW\r\n               
      uint indirectIndex = indirectBuffer.IncrementCounter();\r\n\t\t\t\tindirectBuffer[indirectIndex]
      = index;\r\n#endif\r\n\r\n#if HAS_STRIPS\t\t\t\r\n\t\t\t\tuint relativeIndexInStrip
      = GetRelativeIndex(index, stripData);\r\n\t\t\t\tInterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE,
      stripData.stripIndex), relativeIndexInStrip);\r\n\t\t\t\tInterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE,
      stripData.stripIndex), relativeIndexInStrip);\r\n#endif\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tattributeBuffer.Store((index
      * 0x2 + 0xE0) << 2,uint(attributes.alive));\n\t\t\t\t\n\r\n#if USE_DEAD_LIST
      && !VFX_USE_STRIPALIVE_CURRENT\r\n\t\t\t\tuint deadIndex = deadListOut.IncrementCounter();\r\n\t\t\t\tdeadListOut[deadIndex]
      = index;\r\n#endif\r\n\t\t\t}\r\n\t\t}\r\n#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT\r\n       
      else if (attributes.stripAlive)\r\n        {\r\n            if (STRIP_DATA_X(attachedStripDataBuffer,
      STRIP_MIN_ALIVE, index) == ~1) // Attached strip is no longer alive, recycle
      the particle \r\n            {\r\n                uint deadIndex = deadListOut.IncrementCounter();\r\n\t\t\t\tdeadListOut[deadIndex]
      = index;\r\n                attributes.stripAlive = false;\r\n               
      \r\n            }            \r\n        }\r\n#endif\r\n#else\r\n\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\tattributes.age =
      asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\n\r\n\t\t\r\n#if
      VFX_USE_OLDPOSITION_CURRENT\r\n\t\tattributes.oldPosition = attributes.position;\r\n#endif\r\n#if
      HAS_STRIPS\r\n        const StripData stripData = GetStripDataFromParticleIndex(index,
      PARTICLE_PER_STRIP_COUNT);\r\n        InitStripAttributes(index, attributes,
      stripData);\r\n#endif\r\n\t\t\r\n\t\tAge( /*inout */attributes.age, deltaTime_a);\n\t\tReap(attributes.age,
      attributes.lifetime,  /*inout */attributes.alive);\n\t\t\n\r\n\t\tattributeBuffer.Store((index
      * 0x2 + 0xE0) << 2,uint(attributes.alive));\n\t\tattributeBuffer.Store((index
      * 0x2 + 0xE1) << 2,asuint(attributes.age));\n\t\t\n\r\n#if VFX_HAS_INDIRECT_DRAW\r\n       
      uint indirectIndex = indirectBuffer.IncrementCounter();\r\n\t\tindirectBuffer[indirectIndex]
      = index;\r\n#endif\r\n#endif\r\n\t}\r\n}\r\n"
  - compute: 0
    name: '[System 1]Output Particle Lit Mesh'
    source: "Shader \"Hidden/VFX/ToiletWater/System 1/Output Particle Lit Mesh\"\n{\r\n\tSubShader\r\n\t{\t\r\n\t\tTags
      { \"Queue\"=\"Geometry+450\" \"IgnoreProjector\"=\"False\" \"RenderType\"=\"Opaque\"
      }\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tZTest
      LEqual\n\t\tZWrite On\n\t\tCull Back\n\t\t\n\t\n\t\t\t\n\t\tHLSLINCLUDE\n\t\t\n\t\t#define
      NB_THREADS_PER_GROUP 64\n\t\t#define HAS_ATTRIBUTES 1\n\t\t#define VFX_PASSDEPTH_ACTUAL
      (0)\n\t\t#define VFX_PASSDEPTH_MOTION_VECTOR (1)\n\t\t#define VFX_PASSDEPTH_SELECTION
      (2)\n\t\t#define VFX_USE_LIFETIME_CURRENT 1\n\t\t#define VFX_USE_SCALEX_CURRENT
      1\n\t\t#define VFX_USE_SCALEY_CURRENT 1\n\t\t#define VFX_USE_SCALEZ_CURRENT
      1\n\t\t#define VFX_USE_ANGLEX_CURRENT 1\n\t\t#define VFX_USE_ANGLEY_CURRENT
      1\n\t\t#define VFX_USE_ANGLEZ_CURRENT 1\n\t\t#define VFX_USE_POSITION_CURRENT
      1\n\t\t#define VFX_USE_COLOR_CURRENT 1\n\t\t#define VFX_USE_ALPHA_CURRENT 1\n\t\t#define
      VFX_USE_ALIVE_CURRENT 1\n\t\t#define VFX_USE_AXISX_CURRENT 1\n\t\t#define VFX_USE_AXISY_CURRENT
      1\n\t\t#define VFX_USE_AXISZ_CURRENT 1\n\t\t#define VFX_USE_PIVOTX_CURRENT
      1\n\t\t#define VFX_USE_PIVOTY_CURRENT 1\n\t\t#define VFX_USE_PIVOTZ_CURRENT
      1\n\t\t#define VFX_USE_SIZE_CURRENT 1\n\t\t#define VFX_USE_AGE_CURRENT 1\n\t\t#define
      VFX_COLORMAPPING_DEFAULT 1\n\t\t#define IS_OPAQUE_PARTICLE 1\n\t\t#define USE_ALPHA_TEST
      1\n\t\t#define VFX_SHADERGRAPH 1\n\t\t#define HAS_SHADERGRAPH_PARAM_BASECOLOR
      1\n\t\t#define HAS_SHADERGRAPH_PARAM_ALPHA 1\n\t\t#define HAS_SHADERGRAPH_PARAM_METALLIC
      1\n\t\t#define HAS_SHADERGRAPH_PARAM_SMOOTHNESS 1\n\t\t#define HAS_SHADERGRAPH_PARAM_EMISSIVE
      1\n\t\t#define HAS_SHADERGRAPH_PARAM_NORMAL 1\n\t\t#define HAS_SHADERGRAPH_PARAM_ALPHATHRESHOLD
      1\n\t\t#define SHADERGRAPH_NEEDS_NORMAL_GBUFFER 1\n\t\t#define SHADERGRAPH_NEEDS_TANGENT_GBUFFER
      1\n\t\t#define SHADERGRAPH_NEEDS_NORMAL_FORWARD 1\n\t\t#define SHADERGRAPH_NEEDS_TANGENT_FORWARD
      1\n\t\t#define SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY 1\n\t\t#define SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY
      1\n\t\t#define HDRP_LIT 1\n\t\t#define IS_OPAQUE_NOT_SIMPLE_LIT_PARTICLE 1\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t#define
      VFX_LOCAL_SPACE 1\n\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl\"\n\t\t\n\n\t\tCBUFFER_START(parameters)\n\t\t   
      float4 Size_a;\n\t\t    float4 uniform_a;\n\t\tCBUFFER_END\n\t\t\n\t\tstruct
      Attributes\n\t\t{\n\t\t    float lifetime;\n\t\t    float scaleX;\n\t\t   
      float scaleY;\n\t\t    float scaleZ;\n\t\t    float angleX;\n\t\t    float
      angleY;\n\t\t    float angleZ;\n\t\t    float3 position;\n\t\t    float3 color;\n\t\t   
      float alpha;\n\t\t    bool alive;\n\t\t    float3 axisX;\n\t\t    float3 axisY;\n\t\t   
      float3 axisZ;\n\t\t    float pivotX;\n\t\t    float pivotY;\n\t\t    float
      pivotZ;\n\t\t    float size;\n\t\t    float age;\n\t\t};\n\t\t\n\t\tstruct
      SourceAttributes\n\t\t{\n\t\t};\n\t\t\n\t\t\n\n\t\t\n\t\t#define VFX_NEEDS_COLOR_INTERPOLATOR
      (VFX_USE_COLOR_CURRENT || VFX_USE_ALPHA_CURRENT)\n\t\t#if HAS_STRIPS\n\t\t#define
      VFX_OPTIONAL_INTERPOLATION \n\t\t#else\n\t\t#define VFX_OPTIONAL_INTERPOLATION
      nointerpolation\n\t\t#endif\n\t\t\n\t\tByteAddressBuffer attributeBuffer;\t\n\t\t\n\t\t#if
      VFX_HAS_INDIRECT_DRAW\n\t\tStructuredBuffer<uint> indirectBuffer;\t\n\t\t#endif\t\n\t\t\n\t\t#if
      USE_DEAD_LIST_COUNT\n\t\tByteAddressBuffer deadListCount;\n\t\t#endif\n\t\t\n\t\t#if
      HAS_STRIPS\n\t\tBuffer<uint> stripDataBuffer;\n\t\t#endif\n\t\t\n\t\t#if WRITE_MOTION_VECTOR_IN_FORWARD
      || USE_MOTION_VECTORS_PASS\n\t\tByteAddressBuffer elementToVFXBufferPrevious;\n\t\t#endif\n\t\t\n\t\tCBUFFER_START(outputParams)\n\t\t\tfloat
      nbMax;\n\t\t\tfloat systemSeed;\n\t\tCBUFFER_END\n\t\t\n\t\t// Helper macros
      to always use a valid instanceID\n\t\t#if defined(UNITY_STEREO_INSTANCING_ENABLED)\n\t\t\t#define
      VFX_DECLARE_INSTANCE_ID     UNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t#define VFX_GET_INSTANCE_ID(i)     
      unity_InstanceID\n\t\t#else\n\t\t\t#define VFX_DECLARE_INSTANCE_ID     uint
      instanceID : SV_InstanceID;\n\t\t\t#define VFX_GET_INSTANCE_ID(i)      i.instanceID\n\t\t#endif\n\t\t\n\t\tENDHLSL\n\t\t\n\r\n\t\tPass\n\t\t{\t\t\n\t\t\tTags
      { \"LightMode\"=\"SceneSelectionPass\" }\n\t\t\n\t\t\tZWrite On\n\t\t\tBlend
      Off\n\t\t\t\n\t\t\tHLSLPROGRAM\n\t\t\t#define VFX_PASSDEPTH VFX_PASSDEPTH_SELECTION\n\t\t\t\n\t\t\t#pragma
      target 4.5\n\t\t\t#define UNITY_MATERIAL_LIT\n\t\t\t#pragma multi_compile _
      WRITE_NORMAL_BUFFER\n\t\t\t\n\t\t\tstruct ps_input\n\t\t\t{\t\t\n\t\t\t\tfloat4
      pos : SV_POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\t\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t   
      float4 uv1 : COLOR2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      float4 uv2 : COLOR3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      float4 uv3 : COLOR4;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      float4 vertexColor : COLOR1;\n\t\t\t    #endif\n\t\t\t\t#if USE_ALPHA_TEST
      || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT\n\t\t\t\t// x: alpha
      threshold\n\t\t\t\t// y: frame blending factor\n\t\t\t\t// z: alpha\n\t\t\t\t//
      w: smoothness\n\t\t\t\tnointerpolation float4 builtInInterpolants : TEXCOORD1;\n\t\t\t\t#endif\n\t\t\t\t#if
      USE_FLIPBOOK_MOTIONVECTORS\n\t\t\t\t// x: motion vector scale u\n\t\t\t\t//
      y: motion vector scale v\n\t\t\t\tnointerpolation float2 builtInInterpolants2
      : TEXCOORD3;\n\t\t\t\t#endif\n\t\t\t\t#if defined(WRITE_NORMAL_BUFFER) || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY\n\t\t\t\tfloat3
      normal : TEXCOORD4;\n\t\t\t\t#if SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY\n\t\t\t\tfloat4
      tangent : TEXCOORD5;\n\t\t\t\t#endif\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\tfloat4 cPosPrevious :
      TEXCOORD6;\n\t\t\t\tfloat4 cPosNonJiterred : TEXCOORD7;\n\t\t\t\t#endif\n\t\t\t   
      VFX_OPTIONAL_INTERPOLATION float StrokeWidth : NORMAL0;\n\t\t\t    VFX_OPTIONAL_INTERPOLATION
      float StrokeOffset : NORMAL1;\n\t\t\t    \n\n\t\t\t\t\n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\t\t\t\n\t\t\t#define
      VFX_VARYING_PS_INPUTS ps_input\n\t\t\t#define VFX_VARYING_POSCS pos\n\t\t\t#define
      VFX_VARYING_ALPHA builtInInterpolants.z\n\t\t\t#define VFX_VARYING_ALPHATHRESHOLD
      builtInInterpolants.x\n\t\t\t#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y\n\t\t\t#define
      VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy\n\t\t\t#define VFX_VARYING_UV
      uv\n\t\t\t\n\t\t\t#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t#define
      VFX_VARYING_VELOCITY_CPOS cPosNonJiterred\n\t\t\t#define VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      cPosPrevious\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(WRITE_NORMAL_BUFFER)
      || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY\n\t\t\t#define VFX_VARYING_NORMAL normal\n\t\t\t#endif\n\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t#define VFX_VARYING_SMOOTHNESS builtInInterpolants.w\n\t\t\t#endif\n\t\t\t#if
      SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY\n\t\t\t#define VFX_VARYING_TANGENT tangent\n\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t#if
      !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))\n\t\t\t#error
      VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.\n\t\t\t#endif\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXCommon.hlsl\"\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\t\t\t\n\n\t\t\tvoid
      AttributeFromCurve_7DF18693(inout float size, float age, float lifetime, float4
      Size) /*attribute:size Composition:Multiply AlphaComposition:Overwrite SampleMode:OverLife
      Mode:PerComponent ColorMode:ColorAndAlpha channels:XYZ */\n\t\t\t{\n\t\t\t   
      float t = age / lifetime;\n\t\t\t    float value = 0.0f;\n\t\t\t    value =
      SampleCurve(Size, t);\n\t\t\t    size *= value;\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t\tstruct
      vs_input\n\t\t\t{\n\t\t\t\tfloat3 pos : POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    float4 uv1 : TEXCOORD1;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t    float4 uv2 : TEXCOORD2;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t    float4 uv3 : TEXCOORD3;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t    float4 vertexColor : COLOR;\n\t\t\t   
      #endif\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t\t#if defined(VFX_VARYING_TANGENT)
      || SHADERGRAPH_HAS_NORMAL\n\t\t\t\tfloat4 tangent : TANGENT;\n\t\t\t\t#endif\n\t\t\t\tVFX_DECLARE_INSTANCE_ID\n\t\t\t};\n\t\t\t\n\t\t\t#pragma
      vertex vert\n\t\t\tVFX_VARYING_PS_INPUTS vert(vs_input i)\n\t\t\t{\n\t\t\t   
      VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;\n\t\t\t\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(i);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n\t\t\t\n\t\t\t\tuint
      index = VFX_GET_INSTANCE_ID(i);\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tuint deadCount
      = 0;\n\t\t\t\t\t\t#if USE_DEAD_LIST_COUNT\n\t\t\t\t\t\tdeadCount = deadListCount.Load(0);\n\t\t\t\t\t\t#endif\t\n\t\t\t\t\t\tif
      (index >= asuint(nbMax) - deadCount)\n\t\t\t\t\t\t#if USE_GEOMETRY_SHADER\n\t\t\t\t\t\t\treturn;
      // cull\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn o; // cull\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\tAttributes
      attributes = (Attributes)0;\n\t\t\t\t\t\tSourceAttributes sourceAttributes
      = (SourceAttributes)0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if VFX_HAS_INDIRECT_DRAW\n\t\t\t\t\t\tindex
      = indirectBuffer[index];\n\t\t\t\t\t\tattributes.lifetime = asfloat(attributeBuffer.Load((index
      * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color
      = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha = (float)1;\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\tattributes.axisX
      = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ
      = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX = (float)0;\n\t\t\t\t\t\tattributes.pivotY
      = (float)0;\n\t\t\t\t\t\tattributes.pivotZ = (float)0;\n\t\t\t\t\t\tattributes.size
      = (float)0.100000001;\n\t\t\t\t\t\tattributes.age = asfloat(attributeBuffer.Load((index
      * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      !HAS_STRIPS\n\t\t\t\t\t\tif (!attributes.alive)\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position
      = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha
      = (float)1;\n\t\t\t\t\t\tattributes.axisX = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY
      = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX
      = (float)0;\n\t\t\t\t\t\tattributes.pivotY = (float)0;\n\t\t\t\t\t\tattributes.pivotZ
      = (float)0;\n\t\t\t\t\t\tattributes.size = (float)0.100000001;\n\t\t\t\t\t\tattributes.age
      = asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t//
      Initialize built-in needed attributes\n\t\t\t\t\t\t#if HAS_STRIPS\n\t\t\t\t\t\tInitStripAttributes(index,
      attributes, stripData);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\tAttributeFromCurve_7DF18693(
      /*inout */attributes.size, attributes.age, attributes.lifetime, Size_a);\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\tif
      (!attributes.alive)\n\t\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t\to.VFX_VARYING_UV.xy
      = i.uv;\n\t\t\t    \n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    o.uv1
      = i.uv1;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      o.uv2 = i.uv2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      o.uv3 = i.uv3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      o.vertexColor = i.vertexColor;\n\t\t\t    #endif\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tfloat3
      size3 = float3(attributes.size,attributes.size,attributes.size);\n\t\t\t\t\t\t#if
      VFX_USE_SCALEX_CURRENT\n\t\t\t\t\t\tsize3.x *= attributes.scaleX;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEY_CURRENT\n\t\t\t\t\t\tsize3.y *= attributes.scaleY;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEZ_CURRENT\n\t\t\t\t\t\tsize3.z *= attributes.scaleZ;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat3
      inputVertexPosition = i.pos;\n\t\t\t\tfloat4x4 elementToVFX = GetElementToVFXMatrix(\n\t\t\t\t\tattributes.axisX,\n\t\t\t\t\tattributes.axisY,\n\t\t\t\t\tattributes.axisZ,\n\t\t\t\t\tfloat3(attributes.angleX,attributes.angleY,attributes.angleZ),\n\t\t\t\t\tfloat3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),\n\t\t\t\t\tsize3,\n\t\t\t\t\tattributes.position);\n\t\t\t\t\t\n\t\t\t\tfloat3
      vPos = mul(elementToVFX,float4(inputVertexPosition,1.0f)).xyz;\n\t\t\t\tfloat4
      csPos = TransformPositionVFXToClip(vPos);\n\t\t\t\to.VFX_VARYING_POSCS = csPos;\n\t\t\t\t\n\t\t\t\tfloat3
      normalWS = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,
      i.normal)));\n\t\t\t\t#ifdef VFX_VARYING_NORMAL // TODO Should use inverse
      transpose\n\t\t\t\to.VFX_VARYING_NORMAL = normalWS;\n\t\t\t\t#endif\n\t\t\t\t#ifdef
      VFX_VARYING_TANGENT\n\t\t\t\to.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_VELOCITY_CPOS) && defined(VFX_VARYING_VELOCITY_CPOS_PREVIOUS)\n\t\t\t\t\t\tfloat4x4
      previousElementToVFX = (float4x4)0;\n\t\t\t\t\t\tpreviousElementToVFX[3] =
      float4(0,0,0,1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\tfor (int
      itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\t\tfor
      (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint
      itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;\n\t\t\t\t\t\t\t\tuint
      read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);\n\t\t\t\t\t\t\t\tpreviousElementToVFX[itIndexMatrixRow][itIndexMatrixCol]
      = asfloat(read);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuint
      previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);\n\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = float4(0.0f, 0.0f, 0.0f, 1.0f);\n\t\t\t\t\t\tif
      (asuint(currentFrameIndex) - previousFrameIndex == 1u)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat3
      oldvPos = mul(previousElementToVFX,float4(inputVertexPosition, 1.0f)).xyz;\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      = TransformPositionVFXToPreviousClip(oldvPos);\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = TransformPositionVFXToNonJitteredClip(vPos);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)\n\t\t\t\t\t\to.VFX_VARYING_COLOR
      = attributes.color;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_ALPHA_CURRENT
      && defined(VFX_VARYING_ALPHA) \n\t\t\t\t\t\to.VFX_VARYING_ALPHA = attributes.alpha;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#ifdef
      VFX_VARYING_EXPOSUREWEIGHT\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_EXPOSUREWEIGHT
      = exposureWeight;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_SOFT_PARTICLE
      && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      = invSoftParticlesFadeDistance;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD) && (!VFX_SHADERGRAPH ||
      !HAS_SHADERGRAPH_PARAM_ALPHATHRESHOLD) && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_ALPHATHRESHOLD
      = alphaThreshold;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_UV_SCALE_BIAS\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined (VFX_VARYING_UV)\n\t\t\t\t\t\to.VFX_VARYING_UV.xy = o.VFX_VARYING_UV.xy
      * uvScale + uvBias;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_POSWS)\n\t\t\t\t\t\to.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      USE_FLIPBOOK && defined(VFX_VARYING_UV)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tVFXUVData
      uvData = GetUVData(flipBookSize, invFlipBookSize, o.VFX_VARYING_UV.xy, attributes.texIndex);\n\t\t\t\t\t\to.VFX_VARYING_UV.xy
      = uvData.uvs.xy;\n\t\t\t\t\t\t#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_UV)
      && defined (VFX_VARYING_FRAMEBLEND)\n\t\t\t\t\t\to.VFX_VARYING_UV.zw = uvData.uvs.zw;\n\t\t\t\t\t\to.VFX_VARYING_FRAMEBLEND
      = uvData.blend;\n\t\t\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS && defined(VFX_VARYING_MOTIONVECTORSCALE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_MOTIONVECTORSCALE
      = motionVectorScale * invFlipBookSize;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t   
      \n\t\t\t    float StrokeWidth__ = (float)0;{\n\t\t\t        \n\t\t\t       
      StrokeWidth__ = (float)0.5;\n\t\t\t    }\n\t\t\t    o.StrokeWidth = StrokeWidth__;float
      StrokeOffset__ = (float)0;{\n\t\t\t        float tmp_w = attributes.age / attributes.lifetime;\n\t\t\t       
      float tmp_x = SampleCurve(uniform_a,tmp_w);\n\t\t\t        \n\t\t\t       
      StrokeOffset__ = tmp_x;\n\t\t\t    }\n\t\t\t    o.StrokeOffset = StrokeOffset__;\n\n\t\t\t\t\n\t\t\t\treturn
      o;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t#include \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t#define SHADERPASS SHADERPASS_MOTION_VECTORS\n\t\t\t#else\n\t\t\t#define
      SHADERPASS SHADERPASS_DEPTH_ONLY\n\t\t\t#endif\n\t\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLit.hlsl\"\n\t\t\t\n\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\n\t\t\tvoid VFXGetHDRPLitData(out SurfaceData surfaceData,
      out BuiltinData builtinData, out BSDFData bsdfData, out PreLightData preLightData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData, uint2 tileIndex)\n\t\t\t{\t\n\t\t\t\t#if
      HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t // Loads diffusion profile\n\t\t\t\t#else\n\t\t\t\tconst
      uint diffusionProfileHash = 0;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\tfloat3 posRWS
      = VFXGetPositionRWS(i);\n\t\t\t\tfloat4 posSS = i.VFX_VARYING_POSCS;\n\t\t\t\tPositionInputs
      posInput = GetPositionInput(posSS.xy, _ScreenSize.zw, posSS.z, posSS.w, posRWS,
      tileIndex);\n\t\t\t\t\n\t\t\t\tfloat alpha;\n\t\t\t\tsurfaceData = VFXGetSurfaceData(i,normalWS,uvData,diffusionProfileHash,alpha);\t\n\t\t\t\tbsdfData
      = ConvertSurfaceDataToBSDFData(posSS.xy, surfaceData);\n\t\t\t\n\t\t\t\tpreLightData
      = GetPreLightData(GetWorldSpaceNormalizeViewDir(posRWS),posInput,bsdfData);\n\t\t\t\t\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t    //TODO: investigate why this is needed\n\t\t\t    preLightData.coatPartLambdaV
      = 0;\n\t\t\t    preLightData.coatIblR = 0;\n\t\t\t    preLightData.coatIblF
      = 0;\n\t\t\t    \n\t\t\t\tbuiltinData = VFXGetBuiltinData(i,posInput,surfaceData,uvData,alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvoid
      VFXGetHDRPLitData(out SurfaceData surfaceData, out BuiltinData builtinData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData)\n\t\t\t{\n\t\t\t\tBSDFData
      bsdfData = (BSDFData)0;\n\t\t\t\tPreLightData preLightData = (PreLightData)0;\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t\tVFXGetHDRPLitData(surfaceData,builtinData,bsdfData,preLightData,i,normalWS,uvData,uint2(0,0));\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLitPixelOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinGIUtilities.hlsl\"\n\t\t\t\t\t#ifndef
      SHADERPASS\n\t\t\t\t\t#error Shaderpass should be defined at this stage.\n\t\t\t\t\t#endif\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl\"\n\t\t\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl\"\n\t\t\t//
      Node: Sample Gradient\n\t\t\tvoid Unity_SampleGradient_float(Gradient Gradient,
      float Time, out float4 Out)\n\t\t\t{\n\t\t\t    float3 color = Gradient.colors[0].rgb;\n\t\t\t   
      [unroll]\n\t\t\t    for (int c = 1; c < 8; c++)\n\t\t\t    {\n\t\t\t       
      float colorPos = saturate((Time - Gradient.colors[c-1].w) / (Gradient.colors[c].w
      - Gradient.colors[c-1].w)) * step(c, Gradient.colorsLength-1);\n\t\t\t       
      color = lerp(color, Gradient.colors[c].rgb, lerp(colorPos, step(0.01, colorPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t#ifndef UNITY_COLORSPACE_GAMMA\n\t\t\t   
      color = SRGBToLinear(color);\n\t\t\t#endif\n\t\t\t    float alpha = Gradient.alphas[0].x;\n\t\t\t   
      [unroll]\n\t\t\t    for (int a = 1; a < 8; a++)\n\t\t\t    {\n\t\t\t       
      float alphaPos = saturate((Time - Gradient.alphas[a-1].y) / (Gradient.alphas[a].y
      - Gradient.alphas[a-1].y)) * step(a, Gradient.alphasLength-1);\n\t\t\t       
      alpha = lerp(alpha, Gradient.alphas[a].x, lerp(alphaPos, step(0.01, alphaPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t    Out = float4(color, alpha);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float4 A, float4 B, out float4
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Flip\n\t\t\tvoid
      Unity_Flip_float4(float4 In, float4 Flip, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = (Flip * -2 + 1) * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid
      Unity_Add_float(float A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out =
      A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Step\n\t\t\tvoid Unity_Step_float(float
      Edge, float In, out float Out)\n\t\t\t{\n\t\t\t    Out = step(Edge, In);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Lerp\n\t\t\tvoid Unity_Lerp_float3(float3 A, float3 B, float3 T, out
      float3 Out)\n\t\t\t{\n\t\t\t    Out = lerp(A, B, T);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float A, float B, out float
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Tiling
      And Offset\n\t\t\tvoid Unity_TilingAndOffset_float(float2 UV, float2 Tiling,
      float2 Offset, out float2 Out)\n\t\t\t{\n\t\t\t    Out = UV * Tiling + Offset;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\t\n\t\t\tinline float2 Unity_Voronoi_RandomVector_float
      (float2 UV, float offset)\n\t\t\t{\n\t\t\t    float2x2 m = float2x2(15.27,
      47.63, 99.41, 89.98);\n\t\t\t    UV = frac(sin(mul(UV, m)) * 46839.32);\n\t\t\t   
      return float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\tvoid Unity_Voronoi_float(float2 UV, float AngleOffset,
      float CellDensity, out float Out, out float Cells)\n\t\t\t{\n\t\t\t    float2
      g = floor(UV * CellDensity);\n\t\t\t    float2 f = frac(UV * CellDensity);\n\t\t\t   
      float t = 8.0;\n\t\t\t    float3 res = float3(8.0, 0.0, 0.0);\n\t\t\t\n\t\t\t   
      for(int y=-1; y<=1; y++)\n\t\t\t    {\n\t\t\t        for(int x=-1; x<=1; x++)\n\t\t\t       
      {\n\t\t\t            float2 lattice = float2(x,y);\n\t\t\t            float2
      offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);\n\t\t\t           
      float d = distance(lattice + offset, f);\n\t\t\t\n\t\t\t            if(d <
      res.x)\n\t\t\t            {\n\t\t\t                res = float3(d, offset.x,
      offset.y);\n\t\t\t                Out = res.x;\n\t\t\t                Cells
      = res.y;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Negate\n\t\t\tvoid Unity_Negate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = -1 * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Remap\n\t\t\tvoid Unity_Remap_float(float
      In, float2 InMinMax, float2 OutMinMax, out float Out)\n\t\t\t{\n\t\t\t    Out
      = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y
      - InMinMax.x);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid Unity_Add_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\t\n\t\t\tfloat2 Unity_GradientNoise_Dir_float(float2
      p)\n\t\t\t{\n\t\t\t    // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC\n\t\t\t   
      p = p % 289;\n\t\t\t    float x = (34 * p.x + 1) * p.x % 289 + p.y;\n\t\t\t   
      x = (34 * x + 1) * x % 289;\n\t\t\t    x = frac(x / 41) * 2 - 1;\n\t\t\t   
      return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\tvoid Unity_GradientNoise_float(float2 UV, float
      Scale, out float Out)\n\t\t\t{ \n\t\t\t    float2 p = UV * Scale;\n\t\t\t   
      float2 ip = floor(p);\n\t\t\t    float2 fp = frac(p);\n\t\t\t    float d00
      = dot(Unity_GradientNoise_Dir_float(ip), fp);\n\t\t\t    float d01 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(0, 1)), fp - float2(0, 1));\n\t\t\t    float d10 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 0)), fp - float2(1, 0));\n\t\t\t    float d11 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 1)), fp - float2(1, 1));\n\t\t\t    fp = fp * fp * fp * (fp * (fp
      * 6 - 15) + 10);\n\t\t\t    Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11,
      fp.y), fp.x) + 0.5;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Divide\n\t\t\tvoid Unity_Divide_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A / B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Absolute\n\t\t\tvoid Unity_Absolute_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = abs(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: One Minus\n\t\t\tvoid Unity_OneMinus_float(float
      In, out float Out)\n\t\t\t{\n\t\t\t    Out = 1 - In;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Saturate\n\t\t\tvoid Unity_Saturate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Power\n\t\t\tvoid Unity_Power_float(float
      A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out = pow(A, B);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Add\n\t\t\tvoid Unity_Add_float4(float4 A, float4 B, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Saturate\n\t\t\tvoid Unity_Saturate_float4(float4
      In, out float4 Out)\n\t\t\t{\n\t\t\t    Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\tstruct
      SG_Input_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t    half4 uv0;\n\t\t\t   
      float3 TimeParameters;\n\t\t\t};\n\t\t\t\n\t\t\tstruct SG_Output_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t   
      float3 Normal_8;\n\t\t\t    float Alpha_4;\n\t\t\t    float AlphaThreshold_7;\n\t\t\t};\n\t\t\t\n\t\t\tSG_Output_dc37058d10d4ba54fb1aa4beedd149e5
      SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(\n\t\t\t    SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      IN,\n\t\t\t    /* Property: StrokeWidth */ float StrokeWidth,\n\t\t\t    /*
      Property: StrokeOffset */ float StrokeOffset)\n\t\t\t{\n\t\t\t    // Node:
      UV\n\t\t\t    float4 _UV_7B2716DF_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t    // Node:
      Split\n\t\t\t    float _Split_6781DA13_R_1 = _UV_7B2716DF_Out_0[0];\n\t\t\t   
      float _Split_6781DA13_G_2 = _UV_7B2716DF_Out_0[1];\n\t\t\t    float _Split_6781DA13_B_3
      = _UV_7B2716DF_Out_0[2];\n\t\t\t    float _Split_6781DA13_A_4 = _UV_7B2716DF_Out_0[3];\n\t\t\t\n\t\t\t   
      // Node: UV\n\t\t\t    float4 _UV_29956EDA_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t   
      // Node: Flip\n\t\t\t    float4 _Flip_DC627F17_Out_1;\n\t\t\t    float4 _Flip_DC627F17_Flip
      = float4 (1\n\t\t\t, 0, 0, 0);    Unity_Flip_float4(_UV_29956EDA_Out_0, _Flip_DC627F17_Flip,
      _Flip_DC627F17_Out_1);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t    float _Split_EB43F5F6_R_1
      = _Flip_DC627F17_Out_1[0];\n\t\t\t    float _Split_EB43F5F6_G_2 = _Flip_DC627F17_Out_1[1];\n\t\t\t   
      float _Split_EB43F5F6_B_3 = _Flip_DC627F17_Out_1[2];\n\t\t\t    float _Split_EB43F5F6_A_4
      = _Flip_DC627F17_Out_1[3];\n\t\t\t\n\t\t\t    // Node: Add\n\t\t\t    float
      _Add_FEE6BF5F_Out_2;\n\t\t\t    Unity_Add_float(_Split_EB43F5F6_R_1, 1, _Add_FEE6BF5F_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Vector 3\n\t\t\t    float3 _Vector3_9D63C5B7_Out_0 = float3(_Add_FEE6BF5F_Out_2,
      _Split_EB43F5F6_G_2, _Split_EB43F5F6_B_3);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t   
      float _Split_9B01DC26_R_1 = _UV_29956EDA_Out_0[0];\n\t\t\t    float _Split_9B01DC26_G_2
      = _UV_29956EDA_Out_0[1];\n\t\t\t    float _Split_9B01DC26_B_3 = _UV_29956EDA_Out_0[2];\n\t\t\t   
      float _Split_9B01DC26_A_4 = _UV_29956EDA_Out_0[3];\n\t\t\t\n\t\t\t    // Node:
      Step\n\t\t\t    float _Step_ADBE7A3A_Out_2;\n\t\t\t    Unity_Step_float(0.5,
      _Split_9B01DC26_R_1, _Step_ADBE7A3A_Out_2);\n\t\t\t\n\t\t\t    // Node: Lerp\n\t\t\t   
      float3 _Lerp_F59C9759_Out_3;\n\t\t\t    Unity_Lerp_float3((_UV_29956EDA_Out_0.xyz),
      _Vector3_9D63C5B7_Out_0, (_Step_ADBE7A3A_Out_2.xxx), _Lerp_F59C9759_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_9B4909A9_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -1, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t   
      float2 _Vector2_AF6A7447_Out_0 = float2(0, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_4D6AEA38_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float((_Lerp_F59C9759_Out_3.xy), float2 (1, 1), _Vector2_AF6A7447_Out_0,
      _TilingAndOffset_4D6AEA38_Out_3);\n\t\t\t\n\t\t\t    // Node: Multiply\n\t\t\t   
      float _Multiply_C216CA3B_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -5, _Multiply_C216CA3B_Out_2);\n\t\t\t\n\t\t\t    // Node: Voronoi\n\t\t\t   
      float _Voronoi_A3229C6E_Out_3;\n\t\t\t    float _Voronoi_A3229C6E_Cells_4;\n\t\t\t   
      Unity_Voronoi_float((_Lerp_F59C9759_Out_3.xy), _Multiply_C216CA3B_Out_2, 5,
      _Voronoi_A3229C6E_Out_3, _Voronoi_A3229C6E_Cells_4);\n\t\t\t\n\t\t\t    //
      Node: Vector 1\n\t\t\t    float _Vector1_9C6CFDF9_Out_0 = 0.035;\n\t\t\t\n\t\t\t   
      // Node: Negate\n\t\t\t    float _Negate_554D4DD_Out_1;\n\t\t\t    Unity_Negate_float(_Vector1_9C6CFDF9_Out_0,
      _Negate_554D4DD_Out_1);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t    float2
      _Vector2_7A48EE14_Out_0 = float2(_Negate_554D4DD_Out_1, _Vector1_9C6CFDF9_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Remap\n\t\t\t    float _Remap_3910C005_Out_3;\n\t\t\t    Unity_Remap_float(_Voronoi_A3229C6E_Out_3,
      float2 (0, 1), _Vector2_7A48EE14_Out_0, _Remap_3910C005_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Add\n\t\t\t    float2 _Add_9E71A24D_Out_2;\n\t\t\t    Unity_Add_float2(_TilingAndOffset_4D6AEA38_Out_3,
      (_Remap_3910C005_Out_3.xx), _Add_9E71A24D_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Gradient Noise\n\t\t\t    float _GradientNoise_CE177ECE_Out_2;\n\t\t\t    Unity_GradientNoise_float(_Add_9E71A24D_Out_2,
      10, _GradientNoise_CE177ECE_Out_2);\n\t\t\t\n\t\t\t    // Node: Property\n\t\t\t   
      float _Property_F076E404_Out_0 = StrokeOffset;\n\t\t\t\n\t\t\t    // Node:
      Vector 2\n\t\t\t    float2 _Vector2_AD9AB6D9_Out_0 = float2(0, _Property_F076E404_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_CD2D9ECD_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), _Vector2_AD9AB6D9_Out_0,
      _TilingAndOffset_CD2D9ECD_Out_3);\n\t\t\t\n\t\t\t    // Node: Property\n\t\t\t   
      float _Property_2A8A2B0C_Out_0 = StrokeWidth;\n\t\t\t\n\t\t\t    // Node: Divide\n\t\t\t   
      float2 _Divide_10C4FA36_Out_2;\n\t\t\t    Unity_Divide_float2(_TilingAndOffset_CD2D9ECD_Out_3,
      (_Property_2A8A2B0C_Out_0.xx), _Divide_10C4FA36_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Split\n\t\t\t    float _Split_738CB19A_R_1 = _Divide_10C4FA36_Out_2[0];\n\t\t\t   
      float _Split_738CB19A_G_2 = _Divide_10C4FA36_Out_2[1];\n\t\t\t    float _Split_738CB19A_B_3
      = 0;\n\t\t\t    float _Split_738CB19A_A_4 = 0;\n\t\t\t\n\t\t\t    // Node:
      Absolute\n\t\t\t    float _Absolute_764E0831_Out_1;\n\t\t\t    Unity_Absolute_float(_Split_738CB19A_G_2,
      _Absolute_764E0831_Out_1);\n\t\t\t\n\t\t\t    // Node: One Minus\n\t\t\t   
      float _OneMinus_FFACAA97_Out_1;\n\t\t\t    Unity_OneMinus_float(_Absolute_764E0831_Out_1,
      _OneMinus_FFACAA97_Out_1);\n\t\t\t\n\t\t\t    // Node: Saturate\n\t\t\t   
      float _Saturate_F999C4A1_Out_1;\n\t\t\t    Unity_Saturate_float(_OneMinus_FFACAA97_Out_1,
      _Saturate_F999C4A1_Out_1);\n\t\t\t\n\t\t\t    // Node: Power\n\t\t\t    float
      _Power_D0E8DF9A_Out_2;\n\t\t\t    Unity_Power_float(_Saturate_F999C4A1_Out_1,
      1.5, _Power_D0E8DF9A_Out_2);\n\t\t\t\n\t\t\t    // Node: Remap\n\t\t\t    float
      _Remap_F9ADE183_Out_3;\n\t\t\t    Unity_Remap_float(_GradientNoise_CE177ECE_Out_2,
      float2 (0, 1), float2 (0.5, 1), _Remap_F9ADE183_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_4A109137_Out_2;\n\t\t\t    Unity_Multiply_float(_Power_D0E8DF9A_Out_2,
      _Remap_F9ADE183_Out_3, _Multiply_4A109137_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Saturate\n\t\t\t    float _Saturate_E7C0BD3F_Out_1;\n\t\t\t    Unity_Saturate_float(_Multiply_4A109137_Out_2,
      _Saturate_E7C0BD3F_Out_1);\n\t\t\t\n\t\t\t    // Node: Gradient\n\t\t\t   
      Gradient _Gradient_B50E5DA3_Out_0 = NewGradient(0, 3, 2, float4(1, 1, 1, 0),float4(1,
      1, 1, 0.8088197),float4(0, 0, 0, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t   
      // Node: Sample Gradient\n\t\t\t    float4 _SampleGradient_506BDCEB_Out_2;\n\t\t\t   
      Unity_SampleGradient_float(_Gradient_B50E5DA3_Out_0, _Split_6781DA13_G_2, _SampleGradient_506BDCEB_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float4 _Multiply_41EE5957_Out_2;\n\t\t\t    Unity_Multiply_float((_Saturate_E7C0BD3F_Out_1.xxxx),
      _SampleGradient_506BDCEB_Out_2, _Multiply_41EE5957_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Gradient\n\t\t\t    Gradient _Gradient_71341E71_Out_0 = NewGradient(0,
      2, 2, float4(1, 1, 1, 0.01765469),float4(0, 0, 0, 0.2264744),float4(0, 0, 0,
      0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0,
      0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t    // Node: Sample
      Gradient\n\t\t\t    float4 _SampleGradient_B06677CA_Out_2;\n\t\t\t    Unity_SampleGradient_float(_Gradient_71341E71_Out_0,
      _Split_6781DA13_G_2, _SampleGradient_B06677CA_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Add\n\t\t\t    float4 _Add_6D7B107F_Out_2;\n\t\t\t    Unity_Add_float4(_Multiply_41EE5957_Out_2,
      _SampleGradient_B06677CA_Out_2, _Add_6D7B107F_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Saturate\n\t\t\t    float4 _Saturate_D02FC044_Out_1;\n\t\t\t    Unity_Saturate_float4(_Add_6D7B107F_Out_2,
      _Saturate_D02FC044_Out_1);\n\t\t\t\n\t\t\t    // Visual Effect Master\n\t\t\t   
      SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUT;\n\t\t\t    OUT.Normal_8 = float3
      (0, 0, 1);\n\t\t\t    OUT.Alpha_4 = (_Saturate_D02FC044_Out_1).x;\n\t\t\t   
      OUT.AlphaThreshold_7 = 0.5;\n\t\t\t    return OUT;\n\t\t\t}\n\t\t\t\n\n\t\t\t\t\n\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\tint _ObjectId;\n\t\t\tint _PassValue;\n\t\t\t#endif\n\t\t\t\n\t\t\t#pragma
      fragment frag\n\t\t\tvoid frag(ps_input i\n\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t,
      bool frontFace : SV_IsFrontFace\n\t\t\t#endif\n\t\t\t\n\t\t\t#if VFX_PASSDEPTH
      == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\t, out float4 outMotionVector : SV_Target0\n\t\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t\t\t, out float4 outNormalBuffer : SV_Target1\n\t\t\t\t#endif\n\t\t\t#else\n\t\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t\t\t, out float4 outNormalBuffer : SV_Target0\n\t\t\t\t#elif
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\t\t\t, out float4 outColor :
      SV_Target0\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);\n\t\t\t\tVFXTransformPSInputs(i);\n\t\t\t\t\n\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_NORMAL\n\t\t\t\t\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t\t\t\tconst
      float faceMul = frontFace ? 1.0f : -1.0f;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tconst
      float faceMul = 1.0f;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfloat3
      normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);\n\t\t\t\t\t\t\tconst
      VFXUVData uvData = GetUVData(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_TANGENT\n\t\t\t\t\t\t\tfloat3
      tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);\n\t\t\t\t\t\t\tfloat3 bitangentWS
      = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);\n\t\t\t\t\t\t\tfloat3x3
      tbn = float3x3(tangentWS,bitangentWS,normalWS);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\tfloat3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);\n\t\t\t\t\t\t\tfloat
      normalScale = 1.0f;\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\tnormalScale
      = i.VFX_VARYING_NORMALSCALE;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tnormalWS
      = normalize(lerp(normalWS,mul(n,tbn),normalScale));\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t#ifdef
      VFX_SHADERGRAPH\n\t\t\t        float StrokeWidth = i.StrokeWidth;float StrokeOffset
      = i.StrokeOffset;\n\t\t\t        //Call Shader Graph\n\t\t\t        SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      INSG = (SG_Input_dc37058d10d4ba54fb1aa4beedd149e5)0;\n\t\t\t        INSG.uv0.xy
      = i.uv;\n\t\t\t        INSG.TimeParameters = _TimeParameters.xyz;\n\t\t\t       
      \n\t\t\t        SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUTSG = SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(INSG,StrokeWidth,
      StrokeOffset);\n\t\t\t        #if (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD)
      && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t        i.VFX_VARYING_ALPHATHRESHOLD
      = OUTSG.AlphaThreshold_7;\n\t\t\t        #endif\n\t\t\t        \n\n\t\t\t\t\n\t\t\t       
      float alpha = OUTSG.Alpha_4;\n\t\t\t    #else\n\t\t\t\tfloat alpha = VFXGetFragmentColor(i).a;\n\t\t\t\t#if
      HDRP_USE_BASE_COLOR_MAP_ALPHA\n\t\t\t\t\talpha *= VFXGetTextureColor(VFX_SAMPLER(baseColorMap),i).a;\n\t\t\t\t#endif\n\t\t\t   
      #endif\n\t\t\t\tVFXClipFragmentColor(alpha,i);\n\t\t\t\t\n\t\t\t\t#ifdef WRITE_NORMAL_BUFFER\n\t\t\t       
      #ifndef VFX_SHADERGRAPH\n\t\t\t            VFXComputePixelOutputToNormalBuffer(i,normalWS,uvData,outNormalBuffer);\n\t\t\t       
      #else\n\t\t\t           #if HAS_SHADERGRAPH_PARAM_NORMAL\n\t\t\t              
      float3 n =  OUTSG.Normal_8;\n\t\t\t               normalWS = mul(n,tbn);\n\t\t\t          
      #endif\n\t\t\t           SurfaceData surface = (SurfaceData)0;\n\t\t\t          
      \n\t\t\t           surface.normalWS = normalWS;\n\t\t\t           \n\t\t\t          
      EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surface), i.VFX_VARYING_POSCS.xy,
      outNormalBuffer);\n\t\t\t        #endif\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\t\t\n\t\t\t\t\t\t\tfloat2
      velocity = (i.VFX_VARYING_VELOCITY_CPOS.xy/i.VFX_VARYING_VELOCITY_CPOS.w) -
      (i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.xy/i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.w);\n\t\t\t\t\t\t\t#if
      UNITY_UV_STARTS_AT_TOP\n\t\t\t\t\t\t\t\tvelocity.y = -velocity.y;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tfloat4
      encodedMotionVector = 0.0f;\n\t\t\t\t\t\t\tVFXEncodeMotionVector(velocity *
      0.5f, encodedMotionVector);\n\t\t\t\t\t\t\t\n\t\t\t\t\toutMotionVector = encodedMotionVector;\n\t\t\t\t#elif
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\t\t\t// We use depth prepass
      for scene selection in the editor, this code allow to output the outline correctly\n\t\t\t\t\toutColor
      = float4(_ObjectId, _PassValue, 1.0, 1.0);\n\t\t\t\t#elif VFX_PASSDEPTH ==
      VFX_PASSDEPTH_ACTUAL\n\t\t\t\t\t//void\n\t\t\t\t#else\n\t\t\t\t\t#error VFX_PASSDEPTH
      undefined\n\t\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\n\t\t\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\r\n\t\tPass\n\t\t{\t\t\n\t\t\tTags
      { \"LightMode\"=\"DepthOnly\" }\n\t\t\n\t\t\tZWrite On\n\t\t\tBlend Off\n\t\t\t\n\t\t\tHLSLPROGRAM\n\t\t\t#define
      VFX_PASSDEPTH VFX_PASSDEPTH_ACTUAL\n\t\t\t\n\t\t\t#pragma target 4.5\n\t\t\t#define
      UNITY_MATERIAL_LIT\n\t\t\t#pragma multi_compile _ WRITE_NORMAL_BUFFER\n\t\t\t\n\t\t\tstruct
      ps_input\n\t\t\t{\t\t\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat2 uv
      : TEXCOORD0;\t\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    float4 uv1
      : COLOR2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      float4 uv2 : COLOR3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      float4 uv3 : COLOR4;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      float4 vertexColor : COLOR1;\n\t\t\t    #endif\n\t\t\t\t#if USE_ALPHA_TEST
      || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT\n\t\t\t\t// x: alpha
      threshold\n\t\t\t\t// y: frame blending factor\n\t\t\t\t// z: alpha\n\t\t\t\t//
      w: smoothness\n\t\t\t\tnointerpolation float4 builtInInterpolants : TEXCOORD1;\n\t\t\t\t#endif\n\t\t\t\t#if
      USE_FLIPBOOK_MOTIONVECTORS\n\t\t\t\t// x: motion vector scale u\n\t\t\t\t//
      y: motion vector scale v\n\t\t\t\tnointerpolation float2 builtInInterpolants2
      : TEXCOORD3;\n\t\t\t\t#endif\n\t\t\t\t#if defined(WRITE_NORMAL_BUFFER) || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY\n\t\t\t\tfloat3
      normal : TEXCOORD4;\n\t\t\t\t#if SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY\n\t\t\t\tfloat4
      tangent : TEXCOORD5;\n\t\t\t\t#endif\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\tfloat4 cPosPrevious :
      TEXCOORD6;\n\t\t\t\tfloat4 cPosNonJiterred : TEXCOORD7;\n\t\t\t\t#endif\n\t\t\t   
      VFX_OPTIONAL_INTERPOLATION float StrokeWidth : NORMAL0;\n\t\t\t    VFX_OPTIONAL_INTERPOLATION
      float StrokeOffset : NORMAL1;\n\t\t\t    \n\n\t\t\t\t\n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\t\t\t\n\t\t\t#define
      VFX_VARYING_PS_INPUTS ps_input\n\t\t\t#define VFX_VARYING_POSCS pos\n\t\t\t#define
      VFX_VARYING_ALPHA builtInInterpolants.z\n\t\t\t#define VFX_VARYING_ALPHATHRESHOLD
      builtInInterpolants.x\n\t\t\t#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y\n\t\t\t#define
      VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy\n\t\t\t#define VFX_VARYING_UV
      uv\n\t\t\t\n\t\t\t#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t#define
      VFX_VARYING_VELOCITY_CPOS cPosNonJiterred\n\t\t\t#define VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      cPosPrevious\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(WRITE_NORMAL_BUFFER)
      || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY\n\t\t\t#define VFX_VARYING_NORMAL normal\n\t\t\t#endif\n\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t#define VFX_VARYING_SMOOTHNESS builtInInterpolants.w\n\t\t\t#endif\n\t\t\t#if
      SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY\n\t\t\t#define VFX_VARYING_TANGENT tangent\n\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t#if
      !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))\n\t\t\t#error
      VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.\n\t\t\t#endif\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXCommon.hlsl\"\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\t\t\t\n\n\t\t\tvoid
      AttributeFromCurve_7DF18693(inout float size, float age, float lifetime, float4
      Size) /*attribute:size Composition:Multiply AlphaComposition:Overwrite SampleMode:OverLife
      Mode:PerComponent ColorMode:ColorAndAlpha channels:XYZ */\n\t\t\t{\n\t\t\t   
      float t = age / lifetime;\n\t\t\t    float value = 0.0f;\n\t\t\t    value =
      SampleCurve(Size, t);\n\t\t\t    size *= value;\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t\tstruct
      vs_input\n\t\t\t{\n\t\t\t\tfloat3 pos : POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    float4 uv1 : TEXCOORD1;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t    float4 uv2 : TEXCOORD2;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t    float4 uv3 : TEXCOORD3;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t    float4 vertexColor : COLOR;\n\t\t\t   
      #endif\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t\t#if defined(VFX_VARYING_TANGENT)
      || SHADERGRAPH_HAS_NORMAL\n\t\t\t\tfloat4 tangent : TANGENT;\n\t\t\t\t#endif\n\t\t\t\tVFX_DECLARE_INSTANCE_ID\n\t\t\t};\n\t\t\t\n\t\t\t#pragma
      vertex vert\n\t\t\tVFX_VARYING_PS_INPUTS vert(vs_input i)\n\t\t\t{\n\t\t\t   
      VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;\n\t\t\t\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(i);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n\t\t\t\n\t\t\t\tuint
      index = VFX_GET_INSTANCE_ID(i);\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tuint deadCount
      = 0;\n\t\t\t\t\t\t#if USE_DEAD_LIST_COUNT\n\t\t\t\t\t\tdeadCount = deadListCount.Load(0);\n\t\t\t\t\t\t#endif\t\n\t\t\t\t\t\tif
      (index >= asuint(nbMax) - deadCount)\n\t\t\t\t\t\t#if USE_GEOMETRY_SHADER\n\t\t\t\t\t\t\treturn;
      // cull\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn o; // cull\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\tAttributes
      attributes = (Attributes)0;\n\t\t\t\t\t\tSourceAttributes sourceAttributes
      = (SourceAttributes)0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if VFX_HAS_INDIRECT_DRAW\n\t\t\t\t\t\tindex
      = indirectBuffer[index];\n\t\t\t\t\t\tattributes.lifetime = asfloat(attributeBuffer.Load((index
      * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color
      = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha = (float)1;\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\tattributes.axisX
      = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ
      = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX = (float)0;\n\t\t\t\t\t\tattributes.pivotY
      = (float)0;\n\t\t\t\t\t\tattributes.pivotZ = (float)0;\n\t\t\t\t\t\tattributes.size
      = (float)0.100000001;\n\t\t\t\t\t\tattributes.age = asfloat(attributeBuffer.Load((index
      * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      !HAS_STRIPS\n\t\t\t\t\t\tif (!attributes.alive)\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position
      = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha
      = (float)1;\n\t\t\t\t\t\tattributes.axisX = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY
      = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX
      = (float)0;\n\t\t\t\t\t\tattributes.pivotY = (float)0;\n\t\t\t\t\t\tattributes.pivotZ
      = (float)0;\n\t\t\t\t\t\tattributes.size = (float)0.100000001;\n\t\t\t\t\t\tattributes.age
      = asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t//
      Initialize built-in needed attributes\n\t\t\t\t\t\t#if HAS_STRIPS\n\t\t\t\t\t\tInitStripAttributes(index,
      attributes, stripData);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\tAttributeFromCurve_7DF18693(
      /*inout */attributes.size, attributes.age, attributes.lifetime, Size_a);\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\tif
      (!attributes.alive)\n\t\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t\to.VFX_VARYING_UV.xy
      = i.uv;\n\t\t\t    \n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    o.uv1
      = i.uv1;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      o.uv2 = i.uv2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      o.uv3 = i.uv3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      o.vertexColor = i.vertexColor;\n\t\t\t    #endif\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tfloat3
      size3 = float3(attributes.size,attributes.size,attributes.size);\n\t\t\t\t\t\t#if
      VFX_USE_SCALEX_CURRENT\n\t\t\t\t\t\tsize3.x *= attributes.scaleX;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEY_CURRENT\n\t\t\t\t\t\tsize3.y *= attributes.scaleY;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEZ_CURRENT\n\t\t\t\t\t\tsize3.z *= attributes.scaleZ;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat3
      inputVertexPosition = i.pos;\n\t\t\t\tfloat4x4 elementToVFX = GetElementToVFXMatrix(\n\t\t\t\t\tattributes.axisX,\n\t\t\t\t\tattributes.axisY,\n\t\t\t\t\tattributes.axisZ,\n\t\t\t\t\tfloat3(attributes.angleX,attributes.angleY,attributes.angleZ),\n\t\t\t\t\tfloat3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),\n\t\t\t\t\tsize3,\n\t\t\t\t\tattributes.position);\n\t\t\t\t\t\n\t\t\t\tfloat3
      vPos = mul(elementToVFX,float4(inputVertexPosition,1.0f)).xyz;\n\t\t\t\tfloat4
      csPos = TransformPositionVFXToClip(vPos);\n\t\t\t\to.VFX_VARYING_POSCS = csPos;\n\t\t\t\t\n\t\t\t\tfloat3
      normalWS = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,
      i.normal)));\n\t\t\t\t#ifdef VFX_VARYING_NORMAL // TODO Should use inverse
      transpose\n\t\t\t\to.VFX_VARYING_NORMAL = normalWS;\n\t\t\t\t#endif\n\t\t\t\t#ifdef
      VFX_VARYING_TANGENT\n\t\t\t\to.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_VELOCITY_CPOS) && defined(VFX_VARYING_VELOCITY_CPOS_PREVIOUS)\n\t\t\t\t\t\tfloat4x4
      previousElementToVFX = (float4x4)0;\n\t\t\t\t\t\tpreviousElementToVFX[3] =
      float4(0,0,0,1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\tfor (int
      itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\t\tfor
      (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint
      itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;\n\t\t\t\t\t\t\t\tuint
      read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);\n\t\t\t\t\t\t\t\tpreviousElementToVFX[itIndexMatrixRow][itIndexMatrixCol]
      = asfloat(read);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuint
      previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);\n\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = float4(0.0f, 0.0f, 0.0f, 1.0f);\n\t\t\t\t\t\tif
      (asuint(currentFrameIndex) - previousFrameIndex == 1u)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat3
      oldvPos = mul(previousElementToVFX,float4(inputVertexPosition, 1.0f)).xyz;\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      = TransformPositionVFXToPreviousClip(oldvPos);\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = TransformPositionVFXToNonJitteredClip(vPos);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)\n\t\t\t\t\t\to.VFX_VARYING_COLOR
      = attributes.color;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_ALPHA_CURRENT
      && defined(VFX_VARYING_ALPHA) \n\t\t\t\t\t\to.VFX_VARYING_ALPHA = attributes.alpha;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#ifdef
      VFX_VARYING_EXPOSUREWEIGHT\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_EXPOSUREWEIGHT
      = exposureWeight;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_SOFT_PARTICLE
      && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      = invSoftParticlesFadeDistance;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD) && (!VFX_SHADERGRAPH ||
      !HAS_SHADERGRAPH_PARAM_ALPHATHRESHOLD) && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_ALPHATHRESHOLD
      = alphaThreshold;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_UV_SCALE_BIAS\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined (VFX_VARYING_UV)\n\t\t\t\t\t\to.VFX_VARYING_UV.xy = o.VFX_VARYING_UV.xy
      * uvScale + uvBias;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_POSWS)\n\t\t\t\t\t\to.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      USE_FLIPBOOK && defined(VFX_VARYING_UV)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tVFXUVData
      uvData = GetUVData(flipBookSize, invFlipBookSize, o.VFX_VARYING_UV.xy, attributes.texIndex);\n\t\t\t\t\t\to.VFX_VARYING_UV.xy
      = uvData.uvs.xy;\n\t\t\t\t\t\t#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_UV)
      && defined (VFX_VARYING_FRAMEBLEND)\n\t\t\t\t\t\to.VFX_VARYING_UV.zw = uvData.uvs.zw;\n\t\t\t\t\t\to.VFX_VARYING_FRAMEBLEND
      = uvData.blend;\n\t\t\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS && defined(VFX_VARYING_MOTIONVECTORSCALE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_MOTIONVECTORSCALE
      = motionVectorScale * invFlipBookSize;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t   
      \n\t\t\t    float StrokeWidth__ = (float)0;{\n\t\t\t        \n\t\t\t       
      StrokeWidth__ = (float)0.5;\n\t\t\t    }\n\t\t\t    o.StrokeWidth = StrokeWidth__;float
      StrokeOffset__ = (float)0;{\n\t\t\t        float tmp_w = attributes.age / attributes.lifetime;\n\t\t\t       
      float tmp_x = SampleCurve(uniform_a,tmp_w);\n\t\t\t        \n\t\t\t       
      StrokeOffset__ = tmp_x;\n\t\t\t    }\n\t\t\t    o.StrokeOffset = StrokeOffset__;\n\n\t\t\t\t\n\t\t\t\treturn
      o;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t#include \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t#define SHADERPASS SHADERPASS_MOTION_VECTORS\n\t\t\t#else\n\t\t\t#define
      SHADERPASS SHADERPASS_DEPTH_ONLY\n\t\t\t#endif\n\t\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLit.hlsl\"\n\t\t\t\n\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\n\t\t\tvoid VFXGetHDRPLitData(out SurfaceData surfaceData,
      out BuiltinData builtinData, out BSDFData bsdfData, out PreLightData preLightData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData, uint2 tileIndex)\n\t\t\t{\t\n\t\t\t\t#if
      HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t // Loads diffusion profile\n\t\t\t\t#else\n\t\t\t\tconst
      uint diffusionProfileHash = 0;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\tfloat3 posRWS
      = VFXGetPositionRWS(i);\n\t\t\t\tfloat4 posSS = i.VFX_VARYING_POSCS;\n\t\t\t\tPositionInputs
      posInput = GetPositionInput(posSS.xy, _ScreenSize.zw, posSS.z, posSS.w, posRWS,
      tileIndex);\n\t\t\t\t\n\t\t\t\tfloat alpha;\n\t\t\t\tsurfaceData = VFXGetSurfaceData(i,normalWS,uvData,diffusionProfileHash,alpha);\t\n\t\t\t\tbsdfData
      = ConvertSurfaceDataToBSDFData(posSS.xy, surfaceData);\n\t\t\t\n\t\t\t\tpreLightData
      = GetPreLightData(GetWorldSpaceNormalizeViewDir(posRWS),posInput,bsdfData);\n\t\t\t\t\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t    //TODO: investigate why this is needed\n\t\t\t    preLightData.coatPartLambdaV
      = 0;\n\t\t\t    preLightData.coatIblR = 0;\n\t\t\t    preLightData.coatIblF
      = 0;\n\t\t\t    \n\t\t\t\tbuiltinData = VFXGetBuiltinData(i,posInput,surfaceData,uvData,alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvoid
      VFXGetHDRPLitData(out SurfaceData surfaceData, out BuiltinData builtinData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData)\n\t\t\t{\n\t\t\t\tBSDFData
      bsdfData = (BSDFData)0;\n\t\t\t\tPreLightData preLightData = (PreLightData)0;\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t\tVFXGetHDRPLitData(surfaceData,builtinData,bsdfData,preLightData,i,normalWS,uvData,uint2(0,0));\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLitPixelOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinGIUtilities.hlsl\"\n\t\t\t\t\t#ifndef
      SHADERPASS\n\t\t\t\t\t#error Shaderpass should be defined at this stage.\n\t\t\t\t\t#endif\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl\"\n\t\t\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl\"\n\t\t\t//
      Node: Sample Gradient\n\t\t\tvoid Unity_SampleGradient_float(Gradient Gradient,
      float Time, out float4 Out)\n\t\t\t{\n\t\t\t    float3 color = Gradient.colors[0].rgb;\n\t\t\t   
      [unroll]\n\t\t\t    for (int c = 1; c < 8; c++)\n\t\t\t    {\n\t\t\t       
      float colorPos = saturate((Time - Gradient.colors[c-1].w) / (Gradient.colors[c].w
      - Gradient.colors[c-1].w)) * step(c, Gradient.colorsLength-1);\n\t\t\t       
      color = lerp(color, Gradient.colors[c].rgb, lerp(colorPos, step(0.01, colorPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t#ifndef UNITY_COLORSPACE_GAMMA\n\t\t\t   
      color = SRGBToLinear(color);\n\t\t\t#endif\n\t\t\t    float alpha = Gradient.alphas[0].x;\n\t\t\t   
      [unroll]\n\t\t\t    for (int a = 1; a < 8; a++)\n\t\t\t    {\n\t\t\t       
      float alphaPos = saturate((Time - Gradient.alphas[a-1].y) / (Gradient.alphas[a].y
      - Gradient.alphas[a-1].y)) * step(a, Gradient.alphasLength-1);\n\t\t\t       
      alpha = lerp(alpha, Gradient.alphas[a].x, lerp(alphaPos, step(0.01, alphaPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t    Out = float4(color, alpha);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float4 A, float4 B, out float4
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Flip\n\t\t\tvoid
      Unity_Flip_float4(float4 In, float4 Flip, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = (Flip * -2 + 1) * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid
      Unity_Add_float(float A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out =
      A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Step\n\t\t\tvoid Unity_Step_float(float
      Edge, float In, out float Out)\n\t\t\t{\n\t\t\t    Out = step(Edge, In);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Lerp\n\t\t\tvoid Unity_Lerp_float3(float3 A, float3 B, float3 T, out
      float3 Out)\n\t\t\t{\n\t\t\t    Out = lerp(A, B, T);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float A, float B, out float
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Tiling
      And Offset\n\t\t\tvoid Unity_TilingAndOffset_float(float2 UV, float2 Tiling,
      float2 Offset, out float2 Out)\n\t\t\t{\n\t\t\t    Out = UV * Tiling + Offset;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\t\n\t\t\tinline float2 Unity_Voronoi_RandomVector_float
      (float2 UV, float offset)\n\t\t\t{\n\t\t\t    float2x2 m = float2x2(15.27,
      47.63, 99.41, 89.98);\n\t\t\t    UV = frac(sin(mul(UV, m)) * 46839.32);\n\t\t\t   
      return float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\tvoid Unity_Voronoi_float(float2 UV, float AngleOffset,
      float CellDensity, out float Out, out float Cells)\n\t\t\t{\n\t\t\t    float2
      g = floor(UV * CellDensity);\n\t\t\t    float2 f = frac(UV * CellDensity);\n\t\t\t   
      float t = 8.0;\n\t\t\t    float3 res = float3(8.0, 0.0, 0.0);\n\t\t\t\n\t\t\t   
      for(int y=-1; y<=1; y++)\n\t\t\t    {\n\t\t\t        for(int x=-1; x<=1; x++)\n\t\t\t       
      {\n\t\t\t            float2 lattice = float2(x,y);\n\t\t\t            float2
      offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);\n\t\t\t           
      float d = distance(lattice + offset, f);\n\t\t\t\n\t\t\t            if(d <
      res.x)\n\t\t\t            {\n\t\t\t                res = float3(d, offset.x,
      offset.y);\n\t\t\t                Out = res.x;\n\t\t\t                Cells
      = res.y;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Negate\n\t\t\tvoid Unity_Negate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = -1 * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Remap\n\t\t\tvoid Unity_Remap_float(float
      In, float2 InMinMax, float2 OutMinMax, out float Out)\n\t\t\t{\n\t\t\t    Out
      = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y
      - InMinMax.x);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid Unity_Add_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\t\n\t\t\tfloat2 Unity_GradientNoise_Dir_float(float2
      p)\n\t\t\t{\n\t\t\t    // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC\n\t\t\t   
      p = p % 289;\n\t\t\t    float x = (34 * p.x + 1) * p.x % 289 + p.y;\n\t\t\t   
      x = (34 * x + 1) * x % 289;\n\t\t\t    x = frac(x / 41) * 2 - 1;\n\t\t\t   
      return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\tvoid Unity_GradientNoise_float(float2 UV, float
      Scale, out float Out)\n\t\t\t{ \n\t\t\t    float2 p = UV * Scale;\n\t\t\t   
      float2 ip = floor(p);\n\t\t\t    float2 fp = frac(p);\n\t\t\t    float d00
      = dot(Unity_GradientNoise_Dir_float(ip), fp);\n\t\t\t    float d01 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(0, 1)), fp - float2(0, 1));\n\t\t\t    float d10 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 0)), fp - float2(1, 0));\n\t\t\t    float d11 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 1)), fp - float2(1, 1));\n\t\t\t    fp = fp * fp * fp * (fp * (fp
      * 6 - 15) + 10);\n\t\t\t    Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11,
      fp.y), fp.x) + 0.5;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Divide\n\t\t\tvoid Unity_Divide_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A / B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Absolute\n\t\t\tvoid Unity_Absolute_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = abs(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: One Minus\n\t\t\tvoid Unity_OneMinus_float(float
      In, out float Out)\n\t\t\t{\n\t\t\t    Out = 1 - In;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Saturate\n\t\t\tvoid Unity_Saturate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Power\n\t\t\tvoid Unity_Power_float(float
      A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out = pow(A, B);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Add\n\t\t\tvoid Unity_Add_float4(float4 A, float4 B, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Saturate\n\t\t\tvoid Unity_Saturate_float4(float4
      In, out float4 Out)\n\t\t\t{\n\t\t\t    Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\tstruct
      SG_Input_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t    half4 uv0;\n\t\t\t   
      float3 TimeParameters;\n\t\t\t};\n\t\t\t\n\t\t\tstruct SG_Output_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t   
      float3 Normal_8;\n\t\t\t    float Alpha_4;\n\t\t\t    float AlphaThreshold_7;\n\t\t\t};\n\t\t\t\n\t\t\tSG_Output_dc37058d10d4ba54fb1aa4beedd149e5
      SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(\n\t\t\t    SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      IN,\n\t\t\t    /* Property: StrokeWidth */ float StrokeWidth,\n\t\t\t    /*
      Property: StrokeOffset */ float StrokeOffset)\n\t\t\t{\n\t\t\t    // Node:
      UV\n\t\t\t    float4 _UV_7B2716DF_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t    // Node:
      Split\n\t\t\t    float _Split_6781DA13_R_1 = _UV_7B2716DF_Out_0[0];\n\t\t\t   
      float _Split_6781DA13_G_2 = _UV_7B2716DF_Out_0[1];\n\t\t\t    float _Split_6781DA13_B_3
      = _UV_7B2716DF_Out_0[2];\n\t\t\t    float _Split_6781DA13_A_4 = _UV_7B2716DF_Out_0[3];\n\t\t\t\n\t\t\t   
      // Node: UV\n\t\t\t    float4 _UV_29956EDA_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t   
      // Node: Flip\n\t\t\t    float4 _Flip_DC627F17_Out_1;\n\t\t\t    float4 _Flip_DC627F17_Flip
      = float4 (1\n\t\t\t, 0, 0, 0);    Unity_Flip_float4(_UV_29956EDA_Out_0, _Flip_DC627F17_Flip,
      _Flip_DC627F17_Out_1);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t    float _Split_EB43F5F6_R_1
      = _Flip_DC627F17_Out_1[0];\n\t\t\t    float _Split_EB43F5F6_G_2 = _Flip_DC627F17_Out_1[1];\n\t\t\t   
      float _Split_EB43F5F6_B_3 = _Flip_DC627F17_Out_1[2];\n\t\t\t    float _Split_EB43F5F6_A_4
      = _Flip_DC627F17_Out_1[3];\n\t\t\t\n\t\t\t    // Node: Add\n\t\t\t    float
      _Add_FEE6BF5F_Out_2;\n\t\t\t    Unity_Add_float(_Split_EB43F5F6_R_1, 1, _Add_FEE6BF5F_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Vector 3\n\t\t\t    float3 _Vector3_9D63C5B7_Out_0 = float3(_Add_FEE6BF5F_Out_2,
      _Split_EB43F5F6_G_2, _Split_EB43F5F6_B_3);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t   
      float _Split_9B01DC26_R_1 = _UV_29956EDA_Out_0[0];\n\t\t\t    float _Split_9B01DC26_G_2
      = _UV_29956EDA_Out_0[1];\n\t\t\t    float _Split_9B01DC26_B_3 = _UV_29956EDA_Out_0[2];\n\t\t\t   
      float _Split_9B01DC26_A_4 = _UV_29956EDA_Out_0[3];\n\t\t\t\n\t\t\t    // Node:
      Step\n\t\t\t    float _Step_ADBE7A3A_Out_2;\n\t\t\t    Unity_Step_float(0.5,
      _Split_9B01DC26_R_1, _Step_ADBE7A3A_Out_2);\n\t\t\t\n\t\t\t    // Node: Lerp\n\t\t\t   
      float3 _Lerp_F59C9759_Out_3;\n\t\t\t    Unity_Lerp_float3((_UV_29956EDA_Out_0.xyz),
      _Vector3_9D63C5B7_Out_0, (_Step_ADBE7A3A_Out_2.xxx), _Lerp_F59C9759_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_9B4909A9_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -1, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t   
      float2 _Vector2_AF6A7447_Out_0 = float2(0, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_4D6AEA38_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float((_Lerp_F59C9759_Out_3.xy), float2 (1, 1), _Vector2_AF6A7447_Out_0,
      _TilingAndOffset_4D6AEA38_Out_3);\n\t\t\t\n\t\t\t    // Node: Multiply\n\t\t\t   
      float _Multiply_C216CA3B_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -5, _Multiply_C216CA3B_Out_2);\n\t\t\t\n\t\t\t    // Node: Voronoi\n\t\t\t   
      float _Voronoi_A3229C6E_Out_3;\n\t\t\t    float _Voronoi_A3229C6E_Cells_4;\n\t\t\t   
      Unity_Voronoi_float((_Lerp_F59C9759_Out_3.xy), _Multiply_C216CA3B_Out_2, 5,
      _Voronoi_A3229C6E_Out_3, _Voronoi_A3229C6E_Cells_4);\n\t\t\t\n\t\t\t    //
      Node: Vector 1\n\t\t\t    float _Vector1_9C6CFDF9_Out_0 = 0.035;\n\t\t\t\n\t\t\t   
      // Node: Negate\n\t\t\t    float _Negate_554D4DD_Out_1;\n\t\t\t    Unity_Negate_float(_Vector1_9C6CFDF9_Out_0,
      _Negate_554D4DD_Out_1);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t    float2
      _Vector2_7A48EE14_Out_0 = float2(_Negate_554D4DD_Out_1, _Vector1_9C6CFDF9_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Remap\n\t\t\t    float _Remap_3910C005_Out_3;\n\t\t\t    Unity_Remap_float(_Voronoi_A3229C6E_Out_3,
      float2 (0, 1), _Vector2_7A48EE14_Out_0, _Remap_3910C005_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Add\n\t\t\t    float2 _Add_9E71A24D_Out_2;\n\t\t\t    Unity_Add_float2(_TilingAndOffset_4D6AEA38_Out_3,
      (_Remap_3910C005_Out_3.xx), _Add_9E71A24D_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Gradient Noise\n\t\t\t    float _GradientNoise_CE177ECE_Out_2;\n\t\t\t    Unity_GradientNoise_float(_Add_9E71A24D_Out_2,
      10, _GradientNoise_CE177ECE_Out_2);\n\t\t\t\n\t\t\t    // Node: Property\n\t\t\t   
      float _Property_F076E404_Out_0 = StrokeOffset;\n\t\t\t\n\t\t\t    // Node:
      Vector 2\n\t\t\t    float2 _Vector2_AD9AB6D9_Out_0 = float2(0, _Property_F076E404_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_CD2D9ECD_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), _Vector2_AD9AB6D9_Out_0,
      _TilingAndOffset_CD2D9ECD_Out_3);\n\t\t\t\n\t\t\t    // Node: Property\n\t\t\t   
      float _Property_2A8A2B0C_Out_0 = StrokeWidth;\n\t\t\t\n\t\t\t    // Node: Divide\n\t\t\t   
      float2 _Divide_10C4FA36_Out_2;\n\t\t\t    Unity_Divide_float2(_TilingAndOffset_CD2D9ECD_Out_3,
      (_Property_2A8A2B0C_Out_0.xx), _Divide_10C4FA36_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Split\n\t\t\t    float _Split_738CB19A_R_1 = _Divide_10C4FA36_Out_2[0];\n\t\t\t   
      float _Split_738CB19A_G_2 = _Divide_10C4FA36_Out_2[1];\n\t\t\t    float _Split_738CB19A_B_3
      = 0;\n\t\t\t    float _Split_738CB19A_A_4 = 0;\n\t\t\t\n\t\t\t    // Node:
      Absolute\n\t\t\t    float _Absolute_764E0831_Out_1;\n\t\t\t    Unity_Absolute_float(_Split_738CB19A_G_2,
      _Absolute_764E0831_Out_1);\n\t\t\t\n\t\t\t    // Node: One Minus\n\t\t\t   
      float _OneMinus_FFACAA97_Out_1;\n\t\t\t    Unity_OneMinus_float(_Absolute_764E0831_Out_1,
      _OneMinus_FFACAA97_Out_1);\n\t\t\t\n\t\t\t    // Node: Saturate\n\t\t\t   
      float _Saturate_F999C4A1_Out_1;\n\t\t\t    Unity_Saturate_float(_OneMinus_FFACAA97_Out_1,
      _Saturate_F999C4A1_Out_1);\n\t\t\t\n\t\t\t    // Node: Power\n\t\t\t    float
      _Power_D0E8DF9A_Out_2;\n\t\t\t    Unity_Power_float(_Saturate_F999C4A1_Out_1,
      1.5, _Power_D0E8DF9A_Out_2);\n\t\t\t\n\t\t\t    // Node: Remap\n\t\t\t    float
      _Remap_F9ADE183_Out_3;\n\t\t\t    Unity_Remap_float(_GradientNoise_CE177ECE_Out_2,
      float2 (0, 1), float2 (0.5, 1), _Remap_F9ADE183_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_4A109137_Out_2;\n\t\t\t    Unity_Multiply_float(_Power_D0E8DF9A_Out_2,
      _Remap_F9ADE183_Out_3, _Multiply_4A109137_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Saturate\n\t\t\t    float _Saturate_E7C0BD3F_Out_1;\n\t\t\t    Unity_Saturate_float(_Multiply_4A109137_Out_2,
      _Saturate_E7C0BD3F_Out_1);\n\t\t\t\n\t\t\t    // Node: Gradient\n\t\t\t   
      Gradient _Gradient_B50E5DA3_Out_0 = NewGradient(0, 3, 2, float4(1, 1, 1, 0),float4(1,
      1, 1, 0.8088197),float4(0, 0, 0, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t   
      // Node: Sample Gradient\n\t\t\t    float4 _SampleGradient_506BDCEB_Out_2;\n\t\t\t   
      Unity_SampleGradient_float(_Gradient_B50E5DA3_Out_0, _Split_6781DA13_G_2, _SampleGradient_506BDCEB_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float4 _Multiply_41EE5957_Out_2;\n\t\t\t    Unity_Multiply_float((_Saturate_E7C0BD3F_Out_1.xxxx),
      _SampleGradient_506BDCEB_Out_2, _Multiply_41EE5957_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Gradient\n\t\t\t    Gradient _Gradient_71341E71_Out_0 = NewGradient(0,
      2, 2, float4(1, 1, 1, 0.01765469),float4(0, 0, 0, 0.2264744),float4(0, 0, 0,
      0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0,
      0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t    // Node: Sample
      Gradient\n\t\t\t    float4 _SampleGradient_B06677CA_Out_2;\n\t\t\t    Unity_SampleGradient_float(_Gradient_71341E71_Out_0,
      _Split_6781DA13_G_2, _SampleGradient_B06677CA_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Add\n\t\t\t    float4 _Add_6D7B107F_Out_2;\n\t\t\t    Unity_Add_float4(_Multiply_41EE5957_Out_2,
      _SampleGradient_B06677CA_Out_2, _Add_6D7B107F_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Saturate\n\t\t\t    float4 _Saturate_D02FC044_Out_1;\n\t\t\t    Unity_Saturate_float4(_Add_6D7B107F_Out_2,
      _Saturate_D02FC044_Out_1);\n\t\t\t\n\t\t\t    // Visual Effect Master\n\t\t\t   
      SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUT;\n\t\t\t    OUT.Normal_8 = float3
      (0, 0, 1);\n\t\t\t    OUT.Alpha_4 = (_Saturate_D02FC044_Out_1).x;\n\t\t\t   
      OUT.AlphaThreshold_7 = 0.5;\n\t\t\t    return OUT;\n\t\t\t}\n\t\t\t\n\n\t\t\t\t\n\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\tint _ObjectId;\n\t\t\tint _PassValue;\n\t\t\t#endif\n\t\t\t\n\t\t\t#pragma
      fragment frag\n\t\t\tvoid frag(ps_input i\n\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t,
      bool frontFace : SV_IsFrontFace\n\t\t\t#endif\n\t\t\t\n\t\t\t#if VFX_PASSDEPTH
      == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\t, out float4 outMotionVector : SV_Target0\n\t\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t\t\t, out float4 outNormalBuffer : SV_Target1\n\t\t\t\t#endif\n\t\t\t#else\n\t\t\t\t#ifdef
      WRITE_NORMAL_BUFFER\n\t\t\t\t\t, out float4 outNormalBuffer : SV_Target0\n\t\t\t\t#elif
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\t\t\t, out float4 outColor :
      SV_Target0\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);\n\t\t\t\tVFXTransformPSInputs(i);\n\t\t\t\t\n\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_NORMAL\n\t\t\t\t\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t\t\t\tconst
      float faceMul = frontFace ? 1.0f : -1.0f;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tconst
      float faceMul = 1.0f;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfloat3
      normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);\n\t\t\t\t\t\t\tconst
      VFXUVData uvData = GetUVData(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_TANGENT\n\t\t\t\t\t\t\tfloat3
      tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);\n\t\t\t\t\t\t\tfloat3 bitangentWS
      = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);\n\t\t\t\t\t\t\tfloat3x3
      tbn = float3x3(tangentWS,bitangentWS,normalWS);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\tfloat3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);\n\t\t\t\t\t\t\tfloat
      normalScale = 1.0f;\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\tnormalScale
      = i.VFX_VARYING_NORMALSCALE;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tnormalWS
      = normalize(lerp(normalWS,mul(n,tbn),normalScale));\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t#ifdef
      VFX_SHADERGRAPH\n\t\t\t        float StrokeWidth = i.StrokeWidth;float StrokeOffset
      = i.StrokeOffset;\n\t\t\t        //Call Shader Graph\n\t\t\t        SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      INSG = (SG_Input_dc37058d10d4ba54fb1aa4beedd149e5)0;\n\t\t\t        INSG.uv0.xy
      = i.uv;\n\t\t\t        INSG.TimeParameters = _TimeParameters.xyz;\n\t\t\t       
      \n\t\t\t        SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUTSG = SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(INSG,StrokeWidth,
      StrokeOffset);\n\t\t\t        #if (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD)
      && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t        i.VFX_VARYING_ALPHATHRESHOLD
      = OUTSG.AlphaThreshold_7;\n\t\t\t        #endif\n\t\t\t        \n\n\t\t\t\t\n\t\t\t       
      float alpha = OUTSG.Alpha_4;\n\t\t\t    #else\n\t\t\t\tfloat alpha = VFXGetFragmentColor(i).a;\n\t\t\t\t#if
      HDRP_USE_BASE_COLOR_MAP_ALPHA\n\t\t\t\t\talpha *= VFXGetTextureColor(VFX_SAMPLER(baseColorMap),i).a;\n\t\t\t\t#endif\n\t\t\t   
      #endif\n\t\t\t\tVFXClipFragmentColor(alpha,i);\n\t\t\t\t\n\t\t\t\t#ifdef WRITE_NORMAL_BUFFER\n\t\t\t       
      #ifndef VFX_SHADERGRAPH\n\t\t\t            VFXComputePixelOutputToNormalBuffer(i,normalWS,uvData,outNormalBuffer);\n\t\t\t       
      #else\n\t\t\t           #if HAS_SHADERGRAPH_PARAM_NORMAL\n\t\t\t              
      float3 n =  OUTSG.Normal_8;\n\t\t\t               normalWS = mul(n,tbn);\n\t\t\t          
      #endif\n\t\t\t           SurfaceData surface = (SurfaceData)0;\n\t\t\t          
      \n\t\t\t           surface.normalWS = normalWS;\n\t\t\t           \n\t\t\t          
      EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surface), i.VFX_VARYING_POSCS.xy,
      outNormalBuffer);\n\t\t\t        #endif\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t#if
      VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR\n\t\t\t\t\t\n\t\t\t\t\t\t\tfloat2
      velocity = (i.VFX_VARYING_VELOCITY_CPOS.xy/i.VFX_VARYING_VELOCITY_CPOS.w) -
      (i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.xy/i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.w);\n\t\t\t\t\t\t\t#if
      UNITY_UV_STARTS_AT_TOP\n\t\t\t\t\t\t\t\tvelocity.y = -velocity.y;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tfloat4
      encodedMotionVector = 0.0f;\n\t\t\t\t\t\t\tVFXEncodeMotionVector(velocity *
      0.5f, encodedMotionVector);\n\t\t\t\t\t\t\t\n\t\t\t\t\toutMotionVector = encodedMotionVector;\n\t\t\t\t#elif
      VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION\n\t\t\t\t\t// We use depth prepass
      for scene selection in the editor, this code allow to output the outline correctly\n\t\t\t\t\toutColor
      = float4(_ObjectId, _PassValue, 1.0, 1.0);\n\t\t\t\t#elif VFX_PASSDEPTH ==
      VFX_PASSDEPTH_ACTUAL\n\t\t\t\t\t//void\n\t\t\t\t#else\n\t\t\t\t\t#error VFX_PASSDEPTH
      undefined\n\t\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\r\n\t\t\r\n\t\tPass\n\t\t{\t\t\n\t\t\tTags
      { \"LightMode\"=\"GBuffer\" }\n\t\t\t\n\t\t    Stencil\n\t\t    {\n\t\t    
      WriteMask 6\n\t\t     Ref 2\n\t\t     Comp Always\n\t\t     Pass Replace\n\t\t   
      }\n\n\t\t\t\t\n\t\t\tHLSLPROGRAM\n\t\t\t#pragma target 4.5\n\t\t\t\n\t\t\t#pragma
      multi_compile _ LIGHT_LAYERS\n\t\t\t#pragma multi_compile _ DEBUG_DISPLAY\n\t\t\t\n\t\t\t#define
      UNITY_MATERIAL_LIT\n\t\t\t\n\t\t\t#define HDRP_NEEDS_UVS (HDRP_USE_BASE_COLOR_MAP
      || HDRP_USE_MASK_MAP || USE_NORMAL_MAP || HDRP_USE_EMISSIVE_MAP)\n\t\t\t#define
      HDRP_USE_EMISSIVE (HDRP_USE_EMISSIVE_MAP || HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR)\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstruct
      ps_input\n\t\t\t{\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 color : COLOR0;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#if HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float3 specularColor : COLOR1;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#if HDRP_USE_EMISSIVE\t\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 emissiveColor : COLOR2;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//
      x: smoothness\n\t\t\t\t\t\t\t// y: metallic/thickness\n\t\t\t\t\t\t\t// z:
      normal scale\n\t\t\t\t\t\t\t// w: emissive scale\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 materialProperties : TEXCOORD0;\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t#if
      USE_FLIPBOOK_INTERPOLATION\n\t\t\t\tfloat4 uv : TEXCOORD1;\n\t\t\t\t#else\n\t\t\t\tfloat2
      uv : TEXCOORD1;\t\n\t\t\t\t#endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV1\n\t\t       
      float4 uv1 : COLOR2;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV2\n\t\t       
      float4 uv2 : COLOR3;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV3\n\t\t       
      float4 uv3 : COLOR4;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t       
      float4 vertexColor : COLOR1;\n\t\t        #endif\n\t\t\t\tfloat3 normal : TEXCOORD2;\n\t\t\t\t#if
      USE_NORMAL_MAP || SHADERGRAPH_NEEDS_TANGENT_GBUFFER\n\t\t\t\tfloat4 tangent
      : TEXCOORD3;\n\t\t\t\t#endif\n\t\t\t\t#if USE_SOFT_PARTICLE || USE_ALPHA_TEST
      || USE_FLIPBOOK_INTERPOLATION\n\t\t\t\t// x: inverse soft particles fade distance\n\t\t\t\t//
      y: alpha threshold\n\t\t\t\t// z: frame blending factor\n\t\t\t\tnointerpolation
      float3 builtInInterpolants : TEXCOORD4;\n\t\t\t\t#endif\n\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS\n\t\t\t\t//
      x: motion vector scale u\n\t\t\t\t// y: motion vector scale v\n\t\t\t\tnointerpolation
      float2 builtInInterpolants2 : TEXCOORD5;\n\t\t\t\t#endif\n\t\t        \n\t\t#if
      VFX_NEEDS_POSWS_INTERPOLATOR\n\t\t\t\tfloat3 posWS : TEXCOORD6;\n\t\t#endif\n\t\t\n\t\t       
      VFX_OPTIONAL_INTERPOLATION float StrokeWidth : NORMAL0;\n\t\t        VFX_OPTIONAL_INTERPOLATION
      float StrokeOffset : NORMAL1;\n\t\t        \n\n\t\t    \n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\t\t\t\n\t\t\tstruct
      ps_output\n\t\t\t{\n\t\t\t\tfloat4 color : SV_Target0;\n\t\t\t};\n\t\t\n\t\t\n\t\t\t\t\t#if
      (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t#define
      VFX_VARYING_COLOR color.rgb\n\t\t\t\t\t#define VFX_VARYING_ALPHA color.a\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#define
      VFX_VARYING_SMOOTHNESS materialProperties.x\n\t\t\t\t\t\n\t\t\t\t\t#if HDRP_MATERIAL_TYPE_STANDARD\n\t\t\t\t\t#define
      VFX_VARYING_METALLIC materialProperties.y\n\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t#define
      VFX_VARYING_SPECULAR specularColor\n\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t\t#define
      VFX_VARYING_THICKNESS materialProperties.y\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t#define VFX_VARYING_NORMALSCALE materialProperties.z\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_MAP\n\t\t\t\t\t#define VFX_VARYING_EMISSIVESCALE materialProperties.w\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR\n\t\t\t\t\t#define
      VFX_VARYING_EMISSIVE emissiveColor.rgb\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      USE_EXPOSURE_WEIGHT\n\t\t\t\t\t#define VFX_VARYING_EXPOSUREWEIGHT emissiveColor.a\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\n\t\t#define
      VFX_VARYING_PS_INPUTS ps_input\n\t\t#define VFX_VARYING_POSCS pos\n\t\t#define
      VFX_VARYING_UV uv\n\t\t#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x\n\t\t#define
      VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y\n\t\t#define VFX_VARYING_FRAMEBLEND
      builtInInterpolants.z\n\t\t#define VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy\n\t\t#define
      VFX_VARYING_NORMAL normal\n\t\t\n\t\t#if USE_NORMAL_MAP || SHADERGRAPH_NEEDS_TANGENT_GBUFFER\n\t\t#define
      VFX_VARYING_TANGENT tangent\n\t\t#endif\n\t\t#if VFX_NEEDS_POSWS_INTERPOLATOR\n\t\t#define
      VFX_VARYING_POSWS posWS\n\t\t#endif\n\t\t\n\t\t\n\t\t\n\t\t\t#if !(defined(VFX_VARYING_PS_INPUTS)
      && defined(VFX_VARYING_POSCS))\n\t\t\t#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS
      and VFX_VARYING_UV must be defined.\n\t\t\t#endif\n\t\t\t\n\t\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXCommon.hlsl\"\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\t\t\t\n\n\t\t\tvoid
      AttributeFromCurve_7DF18693(inout float size, float age, float lifetime, float4
      Size) /*attribute:size Composition:Multiply AlphaComposition:Overwrite SampleMode:OverLife
      Mode:PerComponent ColorMode:ColorAndAlpha channels:XYZ */\n\t\t\t{\n\t\t\t   
      float t = age / lifetime;\n\t\t\t    float value = 0.0f;\n\t\t\t    value =
      SampleCurve(Size, t);\n\t\t\t    size *= value;\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t\tstruct
      vs_input\n\t\t\t{\n\t\t\t\tfloat3 pos : POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    float4 uv1 : TEXCOORD1;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t    float4 uv2 : TEXCOORD2;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t    float4 uv3 : TEXCOORD3;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t    float4 vertexColor : COLOR;\n\t\t\t   
      #endif\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t\t#if defined(VFX_VARYING_TANGENT)
      || SHADERGRAPH_HAS_NORMAL\n\t\t\t\tfloat4 tangent : TANGENT;\n\t\t\t\t#endif\n\t\t\t\tVFX_DECLARE_INSTANCE_ID\n\t\t\t};\n\t\t\t\n\t\t\t#pragma
      vertex vert\n\t\t\tVFX_VARYING_PS_INPUTS vert(vs_input i)\n\t\t\t{\n\t\t\t   
      VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;\n\t\t\t\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(i);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n\t\t\t\n\t\t\t\tuint
      index = VFX_GET_INSTANCE_ID(i);\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tuint deadCount
      = 0;\n\t\t\t\t\t\t#if USE_DEAD_LIST_COUNT\n\t\t\t\t\t\tdeadCount = deadListCount.Load(0);\n\t\t\t\t\t\t#endif\t\n\t\t\t\t\t\tif
      (index >= asuint(nbMax) - deadCount)\n\t\t\t\t\t\t#if USE_GEOMETRY_SHADER\n\t\t\t\t\t\t\treturn;
      // cull\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn o; // cull\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\tAttributes
      attributes = (Attributes)0;\n\t\t\t\t\t\tSourceAttributes sourceAttributes
      = (SourceAttributes)0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if VFX_HAS_INDIRECT_DRAW\n\t\t\t\t\t\tindex
      = indirectBuffer[index];\n\t\t\t\t\t\tattributes.lifetime = asfloat(attributeBuffer.Load((index
      * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color
      = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha = (float)1;\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\tattributes.axisX
      = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ
      = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX = (float)0;\n\t\t\t\t\t\tattributes.pivotY
      = (float)0;\n\t\t\t\t\t\tattributes.pivotZ = (float)0;\n\t\t\t\t\t\tattributes.size
      = (float)0.100000001;\n\t\t\t\t\t\tattributes.age = asfloat(attributeBuffer.Load((index
      * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      !HAS_STRIPS\n\t\t\t\t\t\tif (!attributes.alive)\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position
      = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha
      = (float)1;\n\t\t\t\t\t\tattributes.axisX = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY
      = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX
      = (float)0;\n\t\t\t\t\t\tattributes.pivotY = (float)0;\n\t\t\t\t\t\tattributes.pivotZ
      = (float)0;\n\t\t\t\t\t\tattributes.size = (float)0.100000001;\n\t\t\t\t\t\tattributes.age
      = asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t//
      Initialize built-in needed attributes\n\t\t\t\t\t\t#if HAS_STRIPS\n\t\t\t\t\t\tInitStripAttributes(index,
      attributes, stripData);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\tAttributeFromCurve_7DF18693(
      /*inout */attributes.size, attributes.age, attributes.lifetime, Size_a);\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\tif
      (!attributes.alive)\n\t\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t\to.VFX_VARYING_UV.xy
      = i.uv;\n\t\t\t    \n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    o.uv1
      = i.uv1;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      o.uv2 = i.uv2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      o.uv3 = i.uv3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      o.vertexColor = i.vertexColor;\n\t\t\t    #endif\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tfloat3
      size3 = float3(attributes.size,attributes.size,attributes.size);\n\t\t\t\t\t\t#if
      VFX_USE_SCALEX_CURRENT\n\t\t\t\t\t\tsize3.x *= attributes.scaleX;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEY_CURRENT\n\t\t\t\t\t\tsize3.y *= attributes.scaleY;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEZ_CURRENT\n\t\t\t\t\t\tsize3.z *= attributes.scaleZ;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat3
      inputVertexPosition = i.pos;\n\t\t\t\tfloat4x4 elementToVFX = GetElementToVFXMatrix(\n\t\t\t\t\tattributes.axisX,\n\t\t\t\t\tattributes.axisY,\n\t\t\t\t\tattributes.axisZ,\n\t\t\t\t\tfloat3(attributes.angleX,attributes.angleY,attributes.angleZ),\n\t\t\t\t\tfloat3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),\n\t\t\t\t\tsize3,\n\t\t\t\t\tattributes.position);\n\t\t\t\t\t\n\t\t\t\tfloat3
      vPos = mul(elementToVFX,float4(inputVertexPosition,1.0f)).xyz;\n\t\t\t\tfloat4
      csPos = TransformPositionVFXToClip(vPos);\n\t\t\t\to.VFX_VARYING_POSCS = csPos;\n\t\t\t\t\n\t\t\t\tfloat3
      normalWS = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,
      i.normal)));\n\t\t\t\t#ifdef VFX_VARYING_NORMAL // TODO Should use inverse
      transpose\n\t\t\t\to.VFX_VARYING_NORMAL = normalWS;\n\t\t\t\t#endif\n\t\t\t\t#ifdef
      VFX_VARYING_TANGENT\n\t\t\t\to.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_VELOCITY_CPOS) && defined(VFX_VARYING_VELOCITY_CPOS_PREVIOUS)\n\t\t\t\t\t\tfloat4x4
      previousElementToVFX = (float4x4)0;\n\t\t\t\t\t\tpreviousElementToVFX[3] =
      float4(0,0,0,1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\tfor (int
      itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\t\tfor
      (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint
      itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;\n\t\t\t\t\t\t\t\tuint
      read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);\n\t\t\t\t\t\t\t\tpreviousElementToVFX[itIndexMatrixRow][itIndexMatrixCol]
      = asfloat(read);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuint
      previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);\n\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = float4(0.0f, 0.0f, 0.0f, 1.0f);\n\t\t\t\t\t\tif
      (asuint(currentFrameIndex) - previousFrameIndex == 1u)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat3
      oldvPos = mul(previousElementToVFX,float4(inputVertexPosition, 1.0f)).xyz;\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      = TransformPositionVFXToPreviousClip(oldvPos);\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = TransformPositionVFXToNonJitteredClip(vPos);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)\n\t\t\t\t\t\to.VFX_VARYING_COLOR
      = attributes.color;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_ALPHA_CURRENT
      && defined(VFX_VARYING_ALPHA) \n\t\t\t\t\t\to.VFX_VARYING_ALPHA = attributes.alpha;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#ifdef
      VFX_VARYING_EXPOSUREWEIGHT\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_EXPOSUREWEIGHT
      = exposureWeight;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_SOFT_PARTICLE
      && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      = invSoftParticlesFadeDistance;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD) && (!VFX_SHADERGRAPH ||
      !HAS_SHADERGRAPH_PARAM_ALPHATHRESHOLD) && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_ALPHATHRESHOLD
      = alphaThreshold;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_UV_SCALE_BIAS\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined (VFX_VARYING_UV)\n\t\t\t\t\t\to.VFX_VARYING_UV.xy = o.VFX_VARYING_UV.xy
      * uvScale + uvBias;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_POSWS)\n\t\t\t\t\t\to.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      USE_FLIPBOOK && defined(VFX_VARYING_UV)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tVFXUVData
      uvData = GetUVData(flipBookSize, invFlipBookSize, o.VFX_VARYING_UV.xy, attributes.texIndex);\n\t\t\t\t\t\to.VFX_VARYING_UV.xy
      = uvData.uvs.xy;\n\t\t\t\t\t\t#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_UV)
      && defined (VFX_VARYING_FRAMEBLEND)\n\t\t\t\t\t\to.VFX_VARYING_UV.zw = uvData.uvs.zw;\n\t\t\t\t\t\to.VFX_VARYING_FRAMEBLEND
      = uvData.blend;\n\t\t\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS && defined(VFX_VARYING_MOTIONVECTORSCALE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_MOTIONVECTORSCALE
      = motionVectorScale * invFlipBookSize;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_SMOOTHNESS\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_SMOOTHNESS
      = smoothness;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if HDRP_MATERIAL_TYPE_STANDARD\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_METALLIC\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_METALLIC
      = metallic;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_SPECULAR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_SPECULAR
      = specularColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_THICKNESS\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_THICKNESS
      = thickness;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_NORMALSCALE
      = normalScale;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_MAP\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_EMISSIVESCALE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVESCALE
      = emissiveScale;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_EMISSIVE\n\t\t\t\t\t\t\t\t\t#if HDRP_USE_EMISSIVE_COLOR\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVE
      = attributes.color;\n\t\t\t\t\t\t\t\t\t#elif HDRP_USE_ADDITIONAL_EMISSIVE_COLOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVE
      = emissiveColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_COLOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_COLOR
      = baseColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t   
      \n\t\t\t    float StrokeWidth__ = (float)0;{\n\t\t\t        \n\t\t\t       
      StrokeWidth__ = (float)0.5;\n\t\t\t    }\n\t\t\t    o.StrokeWidth = StrokeWidth__;float
      StrokeOffset__ = (float)0;{\n\t\t\t        float tmp_w = attributes.age / attributes.lifetime;\n\t\t\t       
      float tmp_x = SampleCurve(uniform_a,tmp_w);\n\t\t\t        \n\t\t\t       
      StrokeOffset__ = tmp_x;\n\t\t\t    }\n\t\t\t    o.StrokeOffset = StrokeOffset__;\n\n\t\t\t\t\n\t\t\t\treturn
      o;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t#include \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t#define
      SHADERPASS SHADERPASS_GBUFFER\t\n\t\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLit.hlsl\"\n\t\t\t\n\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\n\t\t\tvoid VFXGetHDRPLitData(out SurfaceData surfaceData,
      out BuiltinData builtinData, out BSDFData bsdfData, out PreLightData preLightData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData, uint2 tileIndex)\n\t\t\t{\t\n\t\t\t\t#if
      HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t // Loads diffusion profile\n\t\t\t\t#else\n\t\t\t\tconst
      uint diffusionProfileHash = 0;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\tfloat3 posRWS
      = VFXGetPositionRWS(i);\n\t\t\t\tfloat4 posSS = i.VFX_VARYING_POSCS;\n\t\t\t\tPositionInputs
      posInput = GetPositionInput(posSS.xy, _ScreenSize.zw, posSS.z, posSS.w, posRWS,
      tileIndex);\n\t\t\t\t\n\t\t\t\tfloat alpha;\n\t\t\t\tsurfaceData = VFXGetSurfaceData(i,normalWS,uvData,diffusionProfileHash,alpha);\t\n\t\t\t\tbsdfData
      = ConvertSurfaceDataToBSDFData(posSS.xy, surfaceData);\n\t\t\t\n\t\t\t\tpreLightData
      = GetPreLightData(GetWorldSpaceNormalizeViewDir(posRWS),posInput,bsdfData);\n\t\t\t\t\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t    //TODO: investigate why this is needed\n\t\t\t    preLightData.coatPartLambdaV
      = 0;\n\t\t\t    preLightData.coatIblR = 0;\n\t\t\t    preLightData.coatIblF
      = 0;\n\t\t\t    \n\t\t\t\tbuiltinData = VFXGetBuiltinData(i,posInput,surfaceData,uvData,alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvoid
      VFXGetHDRPLitData(out SurfaceData surfaceData, out BuiltinData builtinData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData)\n\t\t\t{\n\t\t\t\tBSDFData
      bsdfData = (BSDFData)0;\n\t\t\t\tPreLightData preLightData = (PreLightData)0;\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t\tVFXGetHDRPLitData(surfaceData,builtinData,bsdfData,preLightData,i,normalWS,uvData,uint2(0,0));\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLitPixelOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl\"\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinGIUtilities.hlsl\"\n\t\t\t\t\t#ifndef
      SHADERPASS\n\t\t\t\t\t#error Shaderpass should be defined at this stage.\n\t\t\t\t\t#endif\n\t\t\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl\"\n\t\t\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl\"\n\t\t\t//
      Node: Sample Gradient\n\t\t\tvoid Unity_SampleGradient_float(Gradient Gradient,
      float Time, out float4 Out)\n\t\t\t{\n\t\t\t    float3 color = Gradient.colors[0].rgb;\n\t\t\t   
      [unroll]\n\t\t\t    for (int c = 1; c < 8; c++)\n\t\t\t    {\n\t\t\t       
      float colorPos = saturate((Time - Gradient.colors[c-1].w) / (Gradient.colors[c].w
      - Gradient.colors[c-1].w)) * step(c, Gradient.colorsLength-1);\n\t\t\t       
      color = lerp(color, Gradient.colors[c].rgb, lerp(colorPos, step(0.01, colorPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t#ifndef UNITY_COLORSPACE_GAMMA\n\t\t\t   
      color = SRGBToLinear(color);\n\t\t\t#endif\n\t\t\t    float alpha = Gradient.alphas[0].x;\n\t\t\t   
      [unroll]\n\t\t\t    for (int a = 1; a < 8; a++)\n\t\t\t    {\n\t\t\t       
      float alphaPos = saturate((Time - Gradient.alphas[a-1].y) / (Gradient.alphas[a].y
      - Gradient.alphas[a-1].y)) * step(a, Gradient.alphasLength-1);\n\t\t\t       
      alpha = lerp(alpha, Gradient.alphas[a].x, lerp(alphaPos, step(0.01, alphaPos),
      Gradient.type));\n\t\t\t    }\n\t\t\t    Out = float4(color, alpha);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float4 A, float4 B, out float4
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Flip\n\t\t\tvoid
      Unity_Flip_float4(float4 In, float4 Flip, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = (Flip * -2 + 1) * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid
      Unity_Add_float(float A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out =
      A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Step\n\t\t\tvoid Unity_Step_float(float
      Edge, float In, out float Out)\n\t\t\t{\n\t\t\t    Out = step(Edge, In);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Lerp\n\t\t\tvoid Unity_Lerp_float3(float3 A, float3 B, float3 T, out
      float3 Out)\n\t\t\t{\n\t\t\t    Out = lerp(A, B, T);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Multiply\n\t\t\tvoid Unity_Multiply_float(float A, float B, out float
      Out)\n\t\t\t{\n\t\t\t    Out = A * B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Tiling
      And Offset\n\t\t\tvoid Unity_TilingAndOffset_float(float2 UV, float2 Tiling,
      float2 Offset, out float2 Out)\n\t\t\t{\n\t\t\t    Out = UV * Tiling + Offset;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\t\n\t\t\tinline float2 Unity_Voronoi_RandomVector_float
      (float2 UV, float offset)\n\t\t\t{\n\t\t\t    float2x2 m = float2x2(15.27,
      47.63, 99.41, 89.98);\n\t\t\t    UV = frac(sin(mul(UV, m)) * 46839.32);\n\t\t\t   
      return float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Voronoi\n\t\t\tvoid Unity_Voronoi_float(float2 UV, float AngleOffset,
      float CellDensity, out float Out, out float Cells)\n\t\t\t{\n\t\t\t    float2
      g = floor(UV * CellDensity);\n\t\t\t    float2 f = frac(UV * CellDensity);\n\t\t\t   
      float t = 8.0;\n\t\t\t    float3 res = float3(8.0, 0.0, 0.0);\n\t\t\t\n\t\t\t   
      for(int y=-1; y<=1; y++)\n\t\t\t    {\n\t\t\t        for(int x=-1; x<=1; x++)\n\t\t\t       
      {\n\t\t\t            float2 lattice = float2(x,y);\n\t\t\t            float2
      offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);\n\t\t\t           
      float d = distance(lattice + offset, f);\n\t\t\t\n\t\t\t            if(d <
      res.x)\n\t\t\t            {\n\t\t\t                res = float3(d, offset.x,
      offset.y);\n\t\t\t                Out = res.x;\n\t\t\t                Cells
      = res.y;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Negate\n\t\t\tvoid Unity_Negate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = -1 * In;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Remap\n\t\t\tvoid Unity_Remap_float(float
      In, float2 InMinMax, float2 OutMinMax, out float Out)\n\t\t\t{\n\t\t\t    Out
      = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y
      - InMinMax.x);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Add\n\t\t\tvoid Unity_Add_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\t\n\t\t\tfloat2 Unity_GradientNoise_Dir_float(float2
      p)\n\t\t\t{\n\t\t\t    // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC\n\t\t\t   
      p = p % 289;\n\t\t\t    float x = (34 * p.x + 1) * p.x % 289 + p.y;\n\t\t\t   
      x = (34 * x + 1) * x % 289;\n\t\t\t    x = frac(x / 41) * 2 - 1;\n\t\t\t   
      return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Gradient Noise\n\t\t\tvoid Unity_GradientNoise_float(float2 UV, float
      Scale, out float Out)\n\t\t\t{ \n\t\t\t    float2 p = UV * Scale;\n\t\t\t   
      float2 ip = floor(p);\n\t\t\t    float2 fp = frac(p);\n\t\t\t    float d00
      = dot(Unity_GradientNoise_Dir_float(ip), fp);\n\t\t\t    float d01 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(0, 1)), fp - float2(0, 1));\n\t\t\t    float d10 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 0)), fp - float2(1, 0));\n\t\t\t    float d11 = dot(Unity_GradientNoise_Dir_float(ip
      + float2(1, 1)), fp - float2(1, 1));\n\t\t\t    fp = fp * fp * fp * (fp * (fp
      * 6 - 15) + 10);\n\t\t\t    Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11,
      fp.y), fp.x) + 0.5;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Smoothstep\n\t\t\tvoid
      Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = smoothstep(Edge1, Edge2, In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Lerp\n\t\t\tvoid
      Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = lerp(A, B, T);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Divide\n\t\t\tvoid Unity_Divide_float2(float2
      A, float2 B, out float2 Out)\n\t\t\t{\n\t\t\t    Out = A / B;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Absolute\n\t\t\tvoid Unity_Absolute_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = abs(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: One Minus\n\t\t\tvoid Unity_OneMinus_float(float
      In, out float Out)\n\t\t\t{\n\t\t\t    Out = 1 - In;\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Saturate\n\t\t\tvoid Unity_Saturate_float(float In, out float Out)\n\t\t\t{\n\t\t\t   
      Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Power\n\t\t\tvoid Unity_Power_float(float
      A, float B, out float Out)\n\t\t\t{\n\t\t\t    Out = pow(A, B);\n\t\t\t}\n\t\t\t\n\t\t\t//
      Node: Add\n\t\t\tvoid Unity_Add_float4(float4 A, float4 B, out float4 Out)\n\t\t\t{\n\t\t\t   
      Out = A + B;\n\t\t\t}\n\t\t\t\n\t\t\t// Node: Saturate\n\t\t\tvoid Unity_Saturate_float4(float4
      In, out float4 Out)\n\t\t\t{\n\t\t\t    Out = saturate(In);\n\t\t\t}\n\t\t\t\n\t\t\tstruct
      SG_Input_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t    half4 uv0;\n\t\t\t   
      float3 TimeParameters;\n\t\t\t};\n\t\t\t\n\t\t\tstruct SG_Output_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t\t{\n\t\t\t   
      float3 BaseColor_1;\n\t\t\t    float Metallic_2;\n\t\t\t    float Smoothness_3;\n\t\t\t   
      float3 Normal_8;\n\t\t\t    float3 Emissive_5;\n\t\t\t    float Alpha_4;\n\t\t\t   
      float AlphaThreshold_7;\n\t\t\t};\n\t\t\t\n\t\t\tSG_Output_dc37058d10d4ba54fb1aa4beedd149e5
      SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(\n\t\t\t    SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      IN,\n\t\t\t    /* Property: StrokeWidth */ float StrokeWidth,\n\t\t\t    /*
      Property: StrokeOffset */ float StrokeOffset)\n\t\t\t{\n\t\t\t    // Node:
      Gradient\n\t\t\t    Gradient _Gradient_DC5A62B4_Out_0 = NewGradient(0, 4, 2,
      float4(0.008944447, 0.4335072, 0.6320754, 0),float4(0.1453809, 0.8928534, 0.9339623,
      0.4088197),float4(0.8639421, 0.9829419, 0.9894866, 0.7735256),float4(1, 1,
      1, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0,
      0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0, 0),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t    // Node: UV\n\t\t\t    float4
      _UV_7B2716DF_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t    float
      _Split_6781DA13_R_1 = _UV_7B2716DF_Out_0[0];\n\t\t\t    float _Split_6781DA13_G_2
      = _UV_7B2716DF_Out_0[1];\n\t\t\t    float _Split_6781DA13_B_3 = _UV_7B2716DF_Out_0[2];\n\t\t\t   
      float _Split_6781DA13_A_4 = _UV_7B2716DF_Out_0[3];\n\t\t\t\n\t\t\t    // Node:
      Sample Gradient\n\t\t\t    float4 _SampleGradient_1C3CE499_Out_2;\n\t\t\t   
      Unity_SampleGradient_float(_Gradient_DC5A62B4_Out_0, _Split_6781DA13_G_2, _SampleGradient_1C3CE499_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float4 _Multiply_2A09EA98_Out_2;\n\t\t\t    Unity_Multiply_float(_SampleGradient_1C3CE499_Out_2,
      _SampleGradient_1C3CE499_Out_2, _Multiply_2A09EA98_Out_2);\n\t\t\t\n\t\t\t   
      // Node: UV\n\t\t\t    float4 _UV_29956EDA_Out_0 = IN.uv0;\n\t\t\t\n\t\t\t   
      // Node: Flip\n\t\t\t    float4 _Flip_DC627F17_Out_1;\n\t\t\t    float4 _Flip_DC627F17_Flip
      = float4 (1\n\t\t\t, 0, 0, 0);    Unity_Flip_float4(_UV_29956EDA_Out_0, _Flip_DC627F17_Flip,
      _Flip_DC627F17_Out_1);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t    float _Split_EB43F5F6_R_1
      = _Flip_DC627F17_Out_1[0];\n\t\t\t    float _Split_EB43F5F6_G_2 = _Flip_DC627F17_Out_1[1];\n\t\t\t   
      float _Split_EB43F5F6_B_3 = _Flip_DC627F17_Out_1[2];\n\t\t\t    float _Split_EB43F5F6_A_4
      = _Flip_DC627F17_Out_1[3];\n\t\t\t\n\t\t\t    // Node: Add\n\t\t\t    float
      _Add_FEE6BF5F_Out_2;\n\t\t\t    Unity_Add_float(_Split_EB43F5F6_R_1, 1, _Add_FEE6BF5F_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Vector 3\n\t\t\t    float3 _Vector3_9D63C5B7_Out_0 = float3(_Add_FEE6BF5F_Out_2,
      _Split_EB43F5F6_G_2, _Split_EB43F5F6_B_3);\n\t\t\t\n\t\t\t    // Node: Split\n\t\t\t   
      float _Split_9B01DC26_R_1 = _UV_29956EDA_Out_0[0];\n\t\t\t    float _Split_9B01DC26_G_2
      = _UV_29956EDA_Out_0[1];\n\t\t\t    float _Split_9B01DC26_B_3 = _UV_29956EDA_Out_0[2];\n\t\t\t   
      float _Split_9B01DC26_A_4 = _UV_29956EDA_Out_0[3];\n\t\t\t\n\t\t\t    // Node:
      Step\n\t\t\t    float _Step_ADBE7A3A_Out_2;\n\t\t\t    Unity_Step_float(0.5,
      _Split_9B01DC26_R_1, _Step_ADBE7A3A_Out_2);\n\t\t\t\n\t\t\t    // Node: Lerp\n\t\t\t   
      float3 _Lerp_F59C9759_Out_3;\n\t\t\t    Unity_Lerp_float3((_UV_29956EDA_Out_0.xyz),
      _Vector3_9D63C5B7_Out_0, (_Step_ADBE7A3A_Out_2.xxx), _Lerp_F59C9759_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_9B4909A9_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -1, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t   
      float2 _Vector2_AF6A7447_Out_0 = float2(0, _Multiply_9B4909A9_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_4D6AEA38_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float((_Lerp_F59C9759_Out_3.xy), float2 (1, 1), _Vector2_AF6A7447_Out_0,
      _TilingAndOffset_4D6AEA38_Out_3);\n\t\t\t\n\t\t\t    // Node: Multiply\n\t\t\t   
      float _Multiply_C216CA3B_Out_2;\n\t\t\t    Unity_Multiply_float(IN.TimeParameters.x,
      -5, _Multiply_C216CA3B_Out_2);\n\t\t\t\n\t\t\t    // Node: Voronoi\n\t\t\t   
      float _Voronoi_A3229C6E_Out_3;\n\t\t\t    float _Voronoi_A3229C6E_Cells_4;\n\t\t\t   
      Unity_Voronoi_float((_Lerp_F59C9759_Out_3.xy), _Multiply_C216CA3B_Out_2, 5,
      _Voronoi_A3229C6E_Out_3, _Voronoi_A3229C6E_Cells_4);\n\t\t\t\n\t\t\t    //
      Node: Vector 1\n\t\t\t    float _Vector1_9C6CFDF9_Out_0 = 0.035;\n\t\t\t\n\t\t\t   
      // Node: Negate\n\t\t\t    float _Negate_554D4DD_Out_1;\n\t\t\t    Unity_Negate_float(_Vector1_9C6CFDF9_Out_0,
      _Negate_554D4DD_Out_1);\n\t\t\t\n\t\t\t    // Node: Vector 2\n\t\t\t    float2
      _Vector2_7A48EE14_Out_0 = float2(_Negate_554D4DD_Out_1, _Vector1_9C6CFDF9_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Remap\n\t\t\t    float _Remap_3910C005_Out_3;\n\t\t\t    Unity_Remap_float(_Voronoi_A3229C6E_Out_3,
      float2 (0, 1), _Vector2_7A48EE14_Out_0, _Remap_3910C005_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Add\n\t\t\t    float2 _Add_9E71A24D_Out_2;\n\t\t\t    Unity_Add_float2(_TilingAndOffset_4D6AEA38_Out_3,
      (_Remap_3910C005_Out_3.xx), _Add_9E71A24D_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Gradient Noise\n\t\t\t    float _GradientNoise_CE177ECE_Out_2;\n\t\t\t    Unity_GradientNoise_float(_Add_9E71A24D_Out_2,
      10, _GradientNoise_CE177ECE_Out_2);\n\t\t\t\n\t\t\t    // Node: Smoothstep\n\t\t\t   
      float _Smoothstep_9EC171AC_Out_3;\n\t\t\t    Unity_Smoothstep_float(0.09, 0.71,
      _GradientNoise_CE177ECE_Out_2, _Smoothstep_9EC171AC_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Lerp\n\t\t\t    float4 _Lerp_D47A5CE8_Out_3;\n\t\t\t    Unity_Lerp_float4(_Multiply_2A09EA98_Out_2,
      _SampleGradient_1C3CE499_Out_2, (_Smoothstep_9EC171AC_Out_3.xxxx), _Lerp_D47A5CE8_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Property\n\t\t\t    float _Property_F076E404_Out_0 = StrokeOffset;\n\t\t\t\n\t\t\t   
      // Node: Vector 2\n\t\t\t    float2 _Vector2_AD9AB6D9_Out_0 = float2(0, _Property_F076E404_Out_0);\n\t\t\t\n\t\t\t   
      // Node: Tiling And Offset\n\t\t\t    float2 _TilingAndOffset_CD2D9ECD_Out_3;\n\t\t\t   
      Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), _Vector2_AD9AB6D9_Out_0,
      _TilingAndOffset_CD2D9ECD_Out_3);\n\t\t\t\n\t\t\t    // Node: Property\n\t\t\t   
      float _Property_2A8A2B0C_Out_0 = StrokeWidth;\n\t\t\t\n\t\t\t    // Node: Divide\n\t\t\t   
      float2 _Divide_10C4FA36_Out_2;\n\t\t\t    Unity_Divide_float2(_TilingAndOffset_CD2D9ECD_Out_3,
      (_Property_2A8A2B0C_Out_0.xx), _Divide_10C4FA36_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Split\n\t\t\t    float _Split_738CB19A_R_1 = _Divide_10C4FA36_Out_2[0];\n\t\t\t   
      float _Split_738CB19A_G_2 = _Divide_10C4FA36_Out_2[1];\n\t\t\t    float _Split_738CB19A_B_3
      = 0;\n\t\t\t    float _Split_738CB19A_A_4 = 0;\n\t\t\t\n\t\t\t    // Node:
      Absolute\n\t\t\t    float _Absolute_764E0831_Out_1;\n\t\t\t    Unity_Absolute_float(_Split_738CB19A_G_2,
      _Absolute_764E0831_Out_1);\n\t\t\t\n\t\t\t    // Node: One Minus\n\t\t\t   
      float _OneMinus_FFACAA97_Out_1;\n\t\t\t    Unity_OneMinus_float(_Absolute_764E0831_Out_1,
      _OneMinus_FFACAA97_Out_1);\n\t\t\t\n\t\t\t    // Node: Saturate\n\t\t\t   
      float _Saturate_F999C4A1_Out_1;\n\t\t\t    Unity_Saturate_float(_OneMinus_FFACAA97_Out_1,
      _Saturate_F999C4A1_Out_1);\n\t\t\t\n\t\t\t    // Node: Power\n\t\t\t    float
      _Power_D0E8DF9A_Out_2;\n\t\t\t    Unity_Power_float(_Saturate_F999C4A1_Out_1,
      1.5, _Power_D0E8DF9A_Out_2);\n\t\t\t\n\t\t\t    // Node: Remap\n\t\t\t    float
      _Remap_F9ADE183_Out_3;\n\t\t\t    Unity_Remap_float(_GradientNoise_CE177ECE_Out_2,
      float2 (0, 1), float2 (0.5, 1), _Remap_F9ADE183_Out_3);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float _Multiply_4A109137_Out_2;\n\t\t\t    Unity_Multiply_float(_Power_D0E8DF9A_Out_2,
      _Remap_F9ADE183_Out_3, _Multiply_4A109137_Out_2);\n\t\t\t\n\t\t\t    // Node:
      Saturate\n\t\t\t    float _Saturate_E7C0BD3F_Out_1;\n\t\t\t    Unity_Saturate_float(_Multiply_4A109137_Out_2,
      _Saturate_E7C0BD3F_Out_1);\n\t\t\t\n\t\t\t    // Node: Gradient\n\t\t\t   
      Gradient _Gradient_B50E5DA3_Out_0 = NewGradient(0, 3, 2, float4(1, 1, 1, 0),float4(1,
      1, 1, 0.8088197),float4(0, 0, 0, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t   
      // Node: Sample Gradient\n\t\t\t    float4 _SampleGradient_506BDCEB_Out_2;\n\t\t\t   
      Unity_SampleGradient_float(_Gradient_B50E5DA3_Out_0, _Split_6781DA13_G_2, _SampleGradient_506BDCEB_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Multiply\n\t\t\t    float4 _Multiply_41EE5957_Out_2;\n\t\t\t    Unity_Multiply_float((_Saturate_E7C0BD3F_Out_1.xxxx),
      _SampleGradient_506BDCEB_Out_2, _Multiply_41EE5957_Out_2);\n\t\t\t\n\t\t\t   
      // Node: Gradient\n\t\t\t    Gradient _Gradient_71341E71_Out_0 = NewGradient(0,
      2, 2, float4(1, 1, 1, 0.01765469),float4(0, 0, 0, 0.2264744),float4(0, 0, 0,
      0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0,
      0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t\t\n\t\t\t    // Node: Sample
      Gradient\n\t\t\t    float4 _SampleGradient_B06677CA_Out_2;\n\t\t\t    Unity_SampleGradient_float(_Gradient_71341E71_Out_0,
      _Split_6781DA13_G_2, _SampleGradient_B06677CA_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Add\n\t\t\t    float4 _Add_6D7B107F_Out_2;\n\t\t\t    Unity_Add_float4(_Multiply_41EE5957_Out_2,
      _SampleGradient_B06677CA_Out_2, _Add_6D7B107F_Out_2);\n\t\t\t\n\t\t\t    //
      Node: Saturate\n\t\t\t    float4 _Saturate_D02FC044_Out_1;\n\t\t\t    Unity_Saturate_float4(_Add_6D7B107F_Out_2,
      _Saturate_D02FC044_Out_1);\n\t\t\t\n\t\t\t    // Visual Effect Master\n\t\t\t   
      SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUT;\n\t\t\t    OUT.BaseColor_1
      = (_Lerp_D47A5CE8_Out_3.xyz);\n\t\t\t    OUT.Metallic_2 = 0.2;\n\t\t\t    OUT.Smoothness_3
      = 1;\n\t\t\t    OUT.Normal_8 = float3 (0, 0, 1);\n\t\t\t    OUT.Emissive_5
      = float3(0, 0, 0);\n\t\t\t    OUT.Alpha_4 = (_Saturate_D02FC044_Out_1).x;\n\t\t\t   
      OUT.AlphaThreshold_7 = 0.5;\n\t\t\t    return OUT;\n\t\t\t}\n\t\t\t\n\n\t\t   
      \n\t\t\t#pragma fragment frag\n\t\t\tvoid frag(ps_input i, OUTPUT_GBUFFER(outGBuffer)\n\t\t#if
      USE_DOUBLE_SIDED\n\t\t\t, bool frontFace : SV_IsFrontFace\n\t\t#endif\n\t\t\t)\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);\n\t\t\t\tVFXTransformPSInputs(i);\n\t\t\t\t\n\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_NORMAL\n\t\t\t\t\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t\t\t\tconst
      float faceMul = frontFace ? 1.0f : -1.0f;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tconst
      float faceMul = 1.0f;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfloat3
      normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);\n\t\t\t\t\t\t\tconst
      VFXUVData uvData = GetUVData(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_TANGENT\n\t\t\t\t\t\t\tfloat3
      tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);\n\t\t\t\t\t\t\tfloat3 bitangentWS
      = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);\n\t\t\t\t\t\t\tfloat3x3
      tbn = float3x3(tangentWS,bitangentWS,normalWS);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\tfloat3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);\n\t\t\t\t\t\t\tfloat
      normalScale = 1.0f;\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\tnormalScale
      = i.VFX_VARYING_NORMALSCALE;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tnormalWS
      = normalize(lerp(normalWS,mul(n,tbn),normalScale));\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t       
      \n\t\t        #ifdef VFX_SHADERGRAPH\n\t\t            float StrokeWidth = i.StrokeWidth;float
      StrokeOffset = i.StrokeOffset;\n\t\t            //Call Shader Graph\n\t\t           
      SG_Input_dc37058d10d4ba54fb1aa4beedd149e5 INSG = (SG_Input_dc37058d10d4ba54fb1aa4beedd149e5)0;\n\t\t           
      INSG.uv0.xy = i.uv;\n\t\t            INSG.TimeParameters = _TimeParameters.xyz;\n\t\t           
      \n\t\t            SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUTSG = SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(INSG,StrokeWidth,
      StrokeOffset);\n\t\t            #if (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD)
      && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t            i.VFX_VARYING_ALPHATHRESHOLD
      = OUTSG.AlphaThreshold_7;\n\t\t            #endif\n\t\t            \n\n\t\t\n\t\t           
      SurfaceData surface;\n\t\t            BuiltinData builtin;\n\t\t           
      surface = (SurfaceData)0;\n\t\t            builtin = (BuiltinData)0;\n\t\t           
      \n\t\t            surface.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;\n\t\t           
      surface.specularOcclusion = 1.0f;\n\t\t            surface.ambientOcclusion
      = 1.0f;\n\t\t            surface.subsurfaceMask = 1.0f;\n\t\t            \n\t\t           
      #if HAS_SHADERGRAPH_PARAM_ALPHA\n\t\t                builtin.opacity = OUTSG.Alpha_4;\n\t\t               
      VFXClipFragmentColor(builtin.opacity,i);\n\t\t            #endif\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_SMOOTHNESS\n\t\t               
      surface.perceptualSmoothness = OUTSG.Smoothness_3;\n\t\t            #endif\n\t\t           
      #if HAS_SHADERGRAPH_PARAM_METALLIC\n\t\t                surface.metallic =
      OUTSG.Metallic_2;\n\t\t            #endif\n\t\t            #if HAS_SHADERGRAPH_PARAM_BASECOLOR\n\t\t               
      surface.baseColor = OUTSG.BaseColor_1;\n\t\t            #endif\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_NORMAL\n\t\t                float3
      n =  OUTSG.Normal_8;\n\t\t                normalWS = mul(n,tbn);\n\t\t           
      #endif\n\t\t            \n\t\t            surface.normalWS = normalWS;\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_EMISSIVE\n\t\t                builtin.emissiveColor
      = OUTSG.Emissive_5;\n\t\t            #endif\n\t\t\n\t\t            \n\t\t           
      VFXSetupBuiltin(builtin,surface,builtin.emissiveColor, i);\n\t\t           
      ENCODE_INTO_GBUFFER(surface, builtin, i.VFX_VARYING_POSCS.xy, outGBuffer);\n\t\t       
      #else\n\t\t            VFXComputePixelOutputToGBuffer(i,normalWS,uvData,outGBuffer);\n\t\t       
      #endif\n\t\t\t}\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\r\n\t\tPass\n\t\t{\t\t\n\t\t\tTags
      { \"LightMode\"=\"Forward\"}\n\t\t\t\t\t\n\t\t\tHLSLPROGRAM\n\t\t\t#pragma
      target 4.5\n\t\t\t\n\t\t\t#define UNITY_MATERIAL_LIT\n\t\t\t#define LIGHTLOOP_TILE_PASS\n\t\t\t#define
      _ENABLE_FOG_ON_TRANSPARENT\n\t\t\t#define _DISABLE_DECALS\n\t\t\t\n\n\t\t\t#pragma
      multi_compile USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST\n\t\t\t#pragma multi_compile
      SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH\n\t\t\t#pragma multi_compile _ DEBUG_DISPLAY\n\t\t\t//#pragma
      enable_d3d11_debug_symbols\n\t\t\t\n\t\t\t#define HDRP_NEEDS_UVS (HDRP_USE_BASE_COLOR_MAP
      || HDRP_USE_MASK_MAP || USE_NORMAL_MAP || HDRP_USE_EMISSIVE_MAP)\n\t\t\t#define
      HDRP_USE_EMISSIVE (HDRP_USE_EMISSIVE_MAP || HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR)\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstruct
      ps_input\n\t\t\t{\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 color : COLOR0;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#if HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float3 specularColor : COLOR1;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#if HDRP_USE_EMISSIVE\t\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 emissiveColor : COLOR2;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//
      x: smoothness\n\t\t\t\t\t\t\t// y: metallic/thickness\n\t\t\t\t\t\t\t// z:
      normal scale\n\t\t\t\t\t\t\t// w: emissive scale\n\t\t\t\t\t\t\tVFX_OPTIONAL_INTERPOLATION
      float4 materialProperties : TEXCOORD0;\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t#if
      USE_FLIPBOOK_INTERPOLATION\n\t\t\t\tfloat4 uv : TEXCOORD1;\n\t\t\t\t#else\n\t\t\t\tfloat2
      uv : TEXCOORD1;\t\n\t\t\t\t#endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV1\n\t\t       
      float4 uv1 : COLOR2;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV2\n\t\t       
      float4 uv2 : COLOR3;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_UV3\n\t\t       
      float4 uv3 : COLOR4;\n\t\t        #endif\n\t\t        #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t       
      float4 vertexColor : COLOR1;\n\t\t        #endif\n\t\t\t\tfloat3 normal : TEXCOORD2;\n\t\t\t\t#if
      USE_NORMAL_MAP || SHADERGRAPH_NEEDS_TANGENT_FORWARD\n\t\t\t\tfloat4 tangent
      : TEXCOORD3;\n\t\t\t\t#endif\n\t\t\t\t#if USE_SOFT_PARTICLE || USE_ALPHA_TEST
      || USE_FLIPBOOK_INTERPOLATION || WRITE_MOTION_VECTOR_IN_FORWARD\n\t\t\t\t//
      x: inverse soft particles fade distance\n\t\t\t\t// y: alpha threshold\n\t\t\t\t//
      z: frame blending factor\n\t\t\t\tnointerpolation float3 builtInInterpolants
      : TEXCOORD4;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS\n\t\t\t\t//
      x: motion vector scale u\n\t\t\t\t// y: motion vector scale v\n\t\t\t\tnointerpolation
      float2 builtInInterpolants2 : TEXCOORD5;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\t#if
      WRITE_MOTION_VECTOR_IN_FORWARD\n\t\t\t\tfloat4 cPosPrevious : TEXCOORD6;\n\t\t\t\tfloat4
      cPosNonJiterred : TEXCOORD7;\n\t\t\t\t#endif\n\t\t\n\t\t\t\tfloat3 posWS :
      TEXCOORD8; // Needed for fog\n\t\t        \n\t\t        VFX_OPTIONAL_INTERPOLATION
      float StrokeWidth : NORMAL0;\n\t\t        VFX_OPTIONAL_INTERPOLATION float
      StrokeOffset : NORMAL1;\n\t\t        \n\n\t\t\t\t\n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\t\t\t\n\t\t\tstruct
      ps_output\n\t\t\t{\n\t\t\t\tfloat4 color : SV_Target0;\n\t\t\t};\n\t\t\n\t\t\n\t\t\t\t\t#if
      (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t#define
      VFX_VARYING_COLOR color.rgb\n\t\t\t\t\t#define VFX_VARYING_ALPHA color.a\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#define
      VFX_VARYING_SMOOTHNESS materialProperties.x\n\t\t\t\t\t\n\t\t\t\t\t#if HDRP_MATERIAL_TYPE_STANDARD\n\t\t\t\t\t#define
      VFX_VARYING_METALLIC materialProperties.y\n\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t#define
      VFX_VARYING_SPECULAR specularColor\n\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t\t#define
      VFX_VARYING_THICKNESS materialProperties.y\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t#define VFX_VARYING_NORMALSCALE materialProperties.z\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_MAP\n\t\t\t\t\t#define VFX_VARYING_EMISSIVESCALE materialProperties.w\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR\n\t\t\t\t\t#define
      VFX_VARYING_EMISSIVE emissiveColor.rgb\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\t#if
      USE_EXPOSURE_WEIGHT\n\t\t\t\t\t#define VFX_VARYING_EXPOSUREWEIGHT emissiveColor.a\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\n\t\t#define
      VFX_VARYING_PS_INPUTS ps_input\n\t\t#define VFX_VARYING_POSCS pos\n\t\t#define
      VFX_VARYING_UV uv\n\t\t#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x\n\t\t#define
      VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y\n\t\t#define VFX_VARYING_FRAMEBLEND
      builtInInterpolants.z\n\t\t#define VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy\n\t\t#define
      VFX_VARYING_NORMAL normal\n\t\t#if USE_NORMAL_MAP || SHADERGRAPH_NEEDS_TANGENT_FORWARD\n\t\t#define
      VFX_VARYING_TANGENT tangent\n\t\t#endif\n\t\t#define VFX_VARYING_POSWS posWS\n\t\t\n\t\t#if
      WRITE_MOTION_VECTOR_IN_FORWARD\n\t\t#define VFX_VARYING_VELOCITY_CPOS cPosNonJiterred\n\t\t#define
      VFX_VARYING_VELOCITY_CPOS_PREVIOUS cPosPrevious\n\t\t#endif\n\t\t\n\t\t\n\t\t\n\t\t\t#if
      !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))\n\t\t\t#error
      VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.\n\t\t\t#endif\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXCommon.hlsl\"\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl\"\n\t\t\t\n\n\t\t\tvoid
      AttributeFromCurve_7DF18693(inout float size, float age, float lifetime, float4
      Size) /*attribute:size Composition:Multiply AlphaComposition:Overwrite SampleMode:OverLife
      Mode:PerComponent ColorMode:ColorAndAlpha channels:XYZ */\n\t\t\t{\n\t\t\t   
      float t = age / lifetime;\n\t\t\t    float value = 0.0f;\n\t\t\t    value =
      SampleCurve(Size, t);\n\t\t\t    size *= value;\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t\tstruct
      vs_input\n\t\t\t{\n\t\t\t\tfloat3 pos : POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    float4 uv1 : TEXCOORD1;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t    float4 uv2 : TEXCOORD2;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t    float4 uv3 : TEXCOORD3;\n\t\t\t    #endif\n\t\t\t   
      #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t    float4 vertexColor : COLOR;\n\t\t\t   
      #endif\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t\t#if defined(VFX_VARYING_TANGENT)
      || SHADERGRAPH_HAS_NORMAL\n\t\t\t\tfloat4 tangent : TANGENT;\n\t\t\t\t#endif\n\t\t\t\tVFX_DECLARE_INSTANCE_ID\n\t\t\t};\n\t\t\t\n\t\t\t#pragma
      vertex vert\n\t\t\tVFX_VARYING_PS_INPUTS vert(vs_input i)\n\t\t\t{\n\t\t\t   
      VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;\n\t\t\t\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(i);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n\t\t\t\n\t\t\t\tuint
      index = VFX_GET_INSTANCE_ID(i);\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tuint deadCount
      = 0;\n\t\t\t\t\t\t#if USE_DEAD_LIST_COUNT\n\t\t\t\t\t\tdeadCount = deadListCount.Load(0);\n\t\t\t\t\t\t#endif\t\n\t\t\t\t\t\tif
      (index >= asuint(nbMax) - deadCount)\n\t\t\t\t\t\t#if USE_GEOMETRY_SHADER\n\t\t\t\t\t\t\treturn;
      // cull\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn o; // cull\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\tAttributes
      attributes = (Attributes)0;\n\t\t\t\t\t\tSourceAttributes sourceAttributes
      = (SourceAttributes)0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if VFX_HAS_INDIRECT_DRAW\n\t\t\t\t\t\tindex
      = indirectBuffer[index];\n\t\t\t\t\t\tattributes.lifetime = asfloat(attributeBuffer.Load((index
      * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ = asfloat(attributeBuffer.Load((index
      * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color
      = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha = (float)1;\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\tattributes.axisX
      = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ
      = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX = (float)0;\n\t\t\t\t\t\tattributes.pivotY
      = (float)0;\n\t\t\t\t\t\tattributes.pivotZ = (float)0;\n\t\t\t\t\t\tattributes.size
      = (float)0.100000001;\n\t\t\t\t\t\tattributes.age = asfloat(attributeBuffer.Load((index
      * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tattributes.alive
      = (attributeBuffer.Load((index * 0x2 + 0xE0) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      !HAS_STRIPS\n\t\t\t\t\t\tif (!attributes.alive)\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tattributes.lifetime
      = asfloat(attributeBuffer.Load((index * 0x1 + 0x0) << 2));\n\t\t\t\t\t\tattributes.scaleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x20) << 2));\n\t\t\t\t\t\tattributes.scaleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x21) << 2));\n\t\t\t\t\t\tattributes.scaleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x22) << 2));\n\t\t\t\t\t\tattributes.angleX
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x23) << 2));\n\t\t\t\t\t\tattributes.angleY
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x24) << 2));\n\t\t\t\t\t\tattributes.angleZ
      = asfloat(attributeBuffer.Load((index * 0x6 + 0x25) << 2));\n\t\t\t\t\t\tattributes.position
      = float3(0, 0, 0);\n\t\t\t\t\t\tattributes.color = float3(1, 1, 1);\n\t\t\t\t\t\tattributes.alpha
      = (float)1;\n\t\t\t\t\t\tattributes.axisX = float3(1, 0, 0);\n\t\t\t\t\t\tattributes.axisY
      = float3(0, 1, 0);\n\t\t\t\t\t\tattributes.axisZ = float3(0, 0, 1);\n\t\t\t\t\t\tattributes.pivotX
      = (float)0;\n\t\t\t\t\t\tattributes.pivotY = (float)0;\n\t\t\t\t\t\tattributes.pivotZ
      = (float)0;\n\t\t\t\t\t\tattributes.size = (float)0.100000001;\n\t\t\t\t\t\tattributes.age
      = asfloat(attributeBuffer.Load((index * 0x2 + 0xE1) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t//
      Initialize built-in needed attributes\n\t\t\t\t\t\t#if HAS_STRIPS\n\t\t\t\t\t\tInitStripAttributes(index,
      attributes, stripData);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\tAttributeFromCurve_7DF18693(
      /*inout */attributes.size, attributes.age, attributes.lifetime, Size_a);\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\tif
      (!attributes.alive)\n\t\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t\to.VFX_VARYING_UV.xy
      = i.uv;\n\t\t\t    \n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV1\n\t\t\t    o.uv1
      = i.uv1;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV2\n\t\t\t   
      o.uv2 = i.uv2;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_UV3\n\t\t\t   
      o.uv3 = i.uv3;\n\t\t\t    #endif\n\t\t\t    #if VFX_SHADERGRAPH_HAS_COLOR\n\t\t\t   
      o.vertexColor = i.vertexColor;\n\t\t\t    #endif\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tfloat3
      size3 = float3(attributes.size,attributes.size,attributes.size);\n\t\t\t\t\t\t#if
      VFX_USE_SCALEX_CURRENT\n\t\t\t\t\t\tsize3.x *= attributes.scaleX;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEY_CURRENT\n\t\t\t\t\t\tsize3.y *= attributes.scaleY;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if
      VFX_USE_SCALEZ_CURRENT\n\t\t\t\t\t\tsize3.z *= attributes.scaleZ;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat3
      inputVertexPosition = i.pos;\n\t\t\t\tfloat4x4 elementToVFX = GetElementToVFXMatrix(\n\t\t\t\t\tattributes.axisX,\n\t\t\t\t\tattributes.axisY,\n\t\t\t\t\tattributes.axisZ,\n\t\t\t\t\tfloat3(attributes.angleX,attributes.angleY,attributes.angleZ),\n\t\t\t\t\tfloat3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),\n\t\t\t\t\tsize3,\n\t\t\t\t\tattributes.position);\n\t\t\t\t\t\n\t\t\t\tfloat3
      vPos = mul(elementToVFX,float4(inputVertexPosition,1.0f)).xyz;\n\t\t\t\tfloat4
      csPos = TransformPositionVFXToClip(vPos);\n\t\t\t\to.VFX_VARYING_POSCS = csPos;\n\t\t\t\t\n\t\t\t\tfloat3
      normalWS = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,
      i.normal)));\n\t\t\t\t#ifdef VFX_VARYING_NORMAL // TODO Should use inverse
      transpose\n\t\t\t\to.VFX_VARYING_NORMAL = normalWS;\n\t\t\t\t#endif\n\t\t\t\t#ifdef
      VFX_VARYING_TANGENT\n\t\t\t\to.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_VELOCITY_CPOS) && defined(VFX_VARYING_VELOCITY_CPOS_PREVIOUS)\n\t\t\t\t\t\tfloat4x4
      previousElementToVFX = (float4x4)0;\n\t\t\t\t\t\tpreviousElementToVFX[3] =
      float4(0,0,0,1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\tfor (int
      itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tUNITY_UNROLL\n\t\t\t\t\t\t\tfor
      (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuint
      itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;\n\t\t\t\t\t\t\t\tuint
      read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);\n\t\t\t\t\t\t\t\tpreviousElementToVFX[itIndexMatrixRow][itIndexMatrixCol]
      = asfloat(read);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuint
      previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);\n\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = float4(0.0f, 0.0f, 0.0f, 1.0f);\n\t\t\t\t\t\tif
      (asuint(currentFrameIndex) - previousFrameIndex == 1u)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat3
      oldvPos = mul(previousElementToVFX,float4(inputVertexPosition, 1.0f)).xyz;\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS_PREVIOUS
      = TransformPositionVFXToPreviousClip(oldvPos);\n\t\t\t\t\t\t\to.VFX_VARYING_VELOCITY_CPOS
      = TransformPositionVFXToNonJitteredClip(vPos);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)\n\t\t\t\t\t\to.VFX_VARYING_COLOR
      = attributes.color;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_ALPHA_CURRENT
      && defined(VFX_VARYING_ALPHA) \n\t\t\t\t\t\to.VFX_VARYING_ALPHA = attributes.alpha;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#ifdef
      VFX_VARYING_EXPOSUREWEIGHT\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_EXPOSUREWEIGHT
      = exposureWeight;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_SOFT_PARTICLE
      && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      = invSoftParticlesFadeDistance;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD) && (!VFX_SHADERGRAPH ||
      !HAS_SHADERGRAPH_PARAM_ALPHATHRESHOLD) && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_ALPHATHRESHOLD
      = alphaThreshold;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_UV_SCALE_BIAS\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined (VFX_VARYING_UV)\n\t\t\t\t\t\to.VFX_VARYING_UV.xy = o.VFX_VARYING_UV.xy
      * uvScale + uvBias;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_POSWS)\n\t\t\t\t\t\to.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      USE_FLIPBOOK && defined(VFX_VARYING_UV)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tVFXUVData
      uvData = GetUVData(flipBookSize, invFlipBookSize, o.VFX_VARYING_UV.xy, attributes.texIndex);\n\t\t\t\t\t\to.VFX_VARYING_UV.xy
      = uvData.uvs.xy;\n\t\t\t\t\t\t#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_UV)
      && defined (VFX_VARYING_FRAMEBLEND)\n\t\t\t\t\t\to.VFX_VARYING_UV.zw = uvData.uvs.zw;\n\t\t\t\t\t\to.VFX_VARYING_FRAMEBLEND
      = uvData.blend;\n\t\t\t\t\t\t#if USE_FLIPBOOK_MOTIONVECTORS && defined(VFX_VARYING_MOTIONVECTORSCALE)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_MOTIONVECTORSCALE
      = motionVectorScale * invFlipBookSize;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_SMOOTHNESS\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_SMOOTHNESS
      = smoothness;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if HDRP_MATERIAL_TYPE_STANDARD\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_METALLIC\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_METALLIC
      = metallic;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_SPECULAR\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_SPECULAR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_SPECULAR
      = specularColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#elif HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_THICKNESS\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_THICKNESS
      = thickness;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_NORMALSCALE
      = normalScale;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      HDRP_USE_EMISSIVE_MAP\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_EMISSIVESCALE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVESCALE
      = emissiveScale;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_EMISSIVE\n\t\t\t\t\t\t\t\t\t#if HDRP_USE_EMISSIVE_COLOR\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVE
      = attributes.color;\n\t\t\t\t\t\t\t\t\t#elif HDRP_USE_ADDITIONAL_EMISSIVE_COLOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_EMISSIVE
      = emissiveColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#if
      HDRP_USE_ADDITIONAL_BASE_COLOR\n\t\t\t\t\t\t\t\t\t#ifdef VFX_VARYING_COLOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\to.VFX_VARYING_COLOR
      = baseColor;\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t   
      \n\t\t\t    float StrokeWidth__ = (float)0;{\n\t\t\t        \n\t\t\t       
      StrokeWidth__ = (float)0.5;\n\t\t\t    }\n\t\t\t    o.StrokeWidth = StrokeWidth__;float
      StrokeOffset__ = (float)0;{\n\t\t\t        float tmp_w = attributes.age / attributes.lifetime;\n\t\t\t       
      float tmp_x = SampleCurve(uniform_a,tmp_w);\n\t\t\t        \n\t\t\t       
      StrokeOffset__ = tmp_x;\n\t\t\t    }\n\t\t\t    o.StrokeOffset = StrokeOffset__;\n\n\t\t\t\t\n\t\t\t\treturn
      o;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t#include \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t#define
      SHADERPASS SHADERPASS_FORWARD\n\t\t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLit.hlsl\"\n\t\t\t\n\t\t\t#ifndef
      VFX_SHADERGRAPH\n\t\t\t\n\t\t\tvoid VFXGetHDRPLitData(out SurfaceData surfaceData,
      out BuiltinData builtinData, out BSDFData bsdfData, out PreLightData preLightData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData, uint2 tileIndex)\n\t\t\t{\t\n\t\t\t\t#if
      HDRP_MATERIAL_TYPE_TRANSLUCENT\n\t\t\t\t // Loads diffusion profile\n\t\t\t\t#else\n\t\t\t\tconst
      uint diffusionProfileHash = 0;\n\t\t\t\t#endif\n\t\t\t\t\n\t\t\t\tfloat3 posRWS
      = VFXGetPositionRWS(i);\n\t\t\t\tfloat4 posSS = i.VFX_VARYING_POSCS;\n\t\t\t\tPositionInputs
      posInput = GetPositionInput(posSS.xy, _ScreenSize.zw, posSS.z, posSS.w, posRWS,
      tileIndex);\n\t\t\t\t\n\t\t\t\tfloat alpha;\n\t\t\t\tsurfaceData = VFXGetSurfaceData(i,normalWS,uvData,diffusionProfileHash,alpha);\t\n\t\t\t\tbsdfData
      = ConvertSurfaceDataToBSDFData(posSS.xy, surfaceData);\n\t\t\t\n\t\t\t\tpreLightData
      = GetPreLightData(GetWorldSpaceNormalizeViewDir(posRWS),posInput,bsdfData);\n\t\t\t\t\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t    //TODO: investigate why this is needed\n\t\t\t    preLightData.coatPartLambdaV
      = 0;\n\t\t\t    preLightData.coatIblR = 0;\n\t\t\t    preLightData.coatIblF
      = 0;\n\t\t\t    \n\t\t\t\tbuiltinData = VFXGetBuiltinData(i,posInput,surfaceData,uvData,alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvoid
      VFXGetHDRPLitData(out SurfaceData surfaceData, out BuiltinData builtinData,
      VFX_VARYING_PS_INPUTS i, float3 normalWS, const VFXUVData uvData)\n\t\t\t{\n\t\t\t\tBSDFData
      bsdfData = (BSDFData)0;\n\t\t\t\tPreLightData preLightData = (PreLightData)0;\n\t\t\t\tpreLightData.diffuseFGD
      = 1.0f;\n\t\t\t\tVFXGetHDRPLitData(surfaceData,builtinData,bsdfData,preLightData,i,normalWS,uvData,uint2(0,0));\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLitPixelOutput.hlsl\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t   
      \n\t\t    \t\t#include \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl\"\n\t\t   
      \t\t#include \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl\"\n\t\t   
      \t\t#include \"Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl\"\n\t\t   
      \t\t#include \"Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl\"\n\t\t   
      \t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinGIUtilities.hlsl\"\n\t\t   
      \t\t#ifndef SHADERPASS\n\t\t    \t\t#error Shaderpass should be defined at
      this stage.\n\t\t    \t\t#endif\n\t\t    \t\t#include \"Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl\"\n\t\t   
      \t\t\n\t\t    \n\t\t    #include \"Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl\"\n\t\t   
      // Node: Sample Gradient\n\t\t    void Unity_SampleGradient_float(Gradient
      Gradient, float Time, out float4 Out)\n\t\t    {\n\t\t        float3 color
      = Gradient.colors[0].rgb;\n\t\t        [unroll]\n\t\t        for (int c = 1;
      c < 8; c++)\n\t\t        {\n\t\t            float colorPos = saturate((Time
      - Gradient.colors[c-1].w) / (Gradient.colors[c].w - Gradient.colors[c-1].w))
      * step(c, Gradient.colorsLength-1);\n\t\t            color = lerp(color, Gradient.colors[c].rgb,
      lerp(colorPos, step(0.01, colorPos), Gradient.type));\n\t\t        }\n\t\t   
      #ifndef UNITY_COLORSPACE_GAMMA\n\t\t        color = SRGBToLinear(color);\n\t\t   
      #endif\n\t\t        float alpha = Gradient.alphas[0].x;\n\t\t        [unroll]\n\t\t       
      for (int a = 1; a < 8; a++)\n\t\t        {\n\t\t            float alphaPos
      = saturate((Time - Gradient.alphas[a-1].y) / (Gradient.alphas[a].y - Gradient.alphas[a-1].y))
      * step(a, Gradient.alphasLength-1);\n\t\t            alpha = lerp(alpha, Gradient.alphas[a].x,
      lerp(alphaPos, step(0.01, alphaPos), Gradient.type));\n\t\t        }\n\t\t       
      Out = float4(color, alpha);\n\t\t    }\n\t\t    \n\t\t    // Node: Multiply\n\t\t   
      void Unity_Multiply_float(float4 A, float4 B, out float4 Out)\n\t\t    {\n\t\t       
      Out = A * B;\n\t\t    }\n\t\t    \n\t\t    // Node: Flip\n\t\t    void Unity_Flip_float4(float4
      In, float4 Flip, out float4 Out)\n\t\t    {\n\t\t        Out = (Flip * -2 +
      1) * In;\n\t\t    }\n\t\t    \n\t\t    // Node: Add\n\t\t    void Unity_Add_float(float
      A, float B, out float Out)\n\t\t    {\n\t\t        Out = A + B;\n\t\t    }\n\t\t   
      \n\t\t    // Node: Step\n\t\t    void Unity_Step_float(float Edge, float In,
      out float Out)\n\t\t    {\n\t\t        Out = step(Edge, In);\n\t\t    }\n\t\t   
      \n\t\t    // Node: Lerp\n\t\t    void Unity_Lerp_float3(float3 A, float3 B,
      float3 T, out float3 Out)\n\t\t    {\n\t\t        Out = lerp(A, B, T);\n\t\t   
      }\n\t\t    \n\t\t    // Node: Multiply\n\t\t    void Unity_Multiply_float(float
      A, float B, out float Out)\n\t\t    {\n\t\t        Out = A * B;\n\t\t    }\n\t\t   
      \n\t\t    // Node: Tiling And Offset\n\t\t    void Unity_TilingAndOffset_float(float2
      UV, float2 Tiling, float2 Offset, out float2 Out)\n\t\t    {\n\t\t        Out
      = UV * Tiling + Offset;\n\t\t    }\n\t\t    \n\t\t    // Node: Voronoi\n\t\t   
      \n\t\t    inline float2 Unity_Voronoi_RandomVector_float (float2 UV, float
      offset)\n\t\t    {\n\t\t        float2x2 m = float2x2(15.27, 47.63, 99.41,
      89.98);\n\t\t        UV = frac(sin(mul(UV, m)) * 46839.32);\n\t\t        return
      float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n\t\t    }\n\t\t   
      \n\t\t    // Node: Voronoi\n\t\t    void Unity_Voronoi_float(float2 UV, float
      AngleOffset, float CellDensity, out float Out, out float Cells)\n\t\t    {\n\t\t       
      float2 g = floor(UV * CellDensity);\n\t\t        float2 f = frac(UV * CellDensity);\n\t\t       
      float t = 8.0;\n\t\t        float3 res = float3(8.0, 0.0, 0.0);\n\t\t    \n\t\t       
      for(int y=-1; y<=1; y++)\n\t\t        {\n\t\t            for(int x=-1; x<=1;
      x++)\n\t\t            {\n\t\t                float2 lattice = float2(x,y);\n\t\t               
      float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);\n\t\t               
      float d = distance(lattice + offset, f);\n\t\t    \n\t\t                if(d
      < res.x)\n\t\t                {\n\t\t                    res = float3(d, offset.x,
      offset.y);\n\t\t                    Out = res.x;\n\t\t                    Cells
      = res.y;\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t   
      }\n\t\t    \n\t\t    // Node: Negate\n\t\t    void Unity_Negate_float(float
      In, out float Out)\n\t\t    {\n\t\t        Out = -1 * In;\n\t\t    }\n\t\t   
      \n\t\t    // Node: Remap\n\t\t    void Unity_Remap_float(float In, float2 InMinMax,
      float2 OutMinMax, out float Out)\n\t\t    {\n\t\t        Out = OutMinMax.x
      + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);\n\t\t   
      }\n\t\t    \n\t\t    // Node: Add\n\t\t    void Unity_Add_float2(float2 A,
      float2 B, out float2 Out)\n\t\t    {\n\t\t        Out = A + B;\n\t\t    }\n\t\t   
      \n\t\t    // Node: Gradient Noise\n\t\t    \n\t\t    float2 Unity_GradientNoise_Dir_float(float2
      p)\n\t\t    {\n\t\t        // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC\n\t\t       
      p = p % 289;\n\t\t        float x = (34 * p.x + 1) * p.x % 289 + p.y;\n\t\t       
      x = (34 * x + 1) * x % 289;\n\t\t        x = frac(x / 41) * 2 - 1;\n\t\t       
      return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));\n\t\t    }\n\t\t   
      \n\t\t    // Node: Gradient Noise\n\t\t    void Unity_GradientNoise_float(float2
      UV, float Scale, out float Out)\n\t\t    { \n\t\t        float2 p = UV * Scale;\n\t\t       
      float2 ip = floor(p);\n\t\t        float2 fp = frac(p);\n\t\t        float
      d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);\n\t\t        float d01 =
      dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));\n\t\t       
      float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1,
      0));\n\t\t        float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1,
      1)), fp - float2(1, 1));\n\t\t        fp = fp * fp * fp * (fp * (fp * 6 - 15)
      + 10);\n\t\t        Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y),
      fp.x) + 0.5;\n\t\t    }\n\t\t    \n\t\t    // Node: Smoothstep\n\t\t    void
      Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)\n\t\t   
      {\n\t\t        Out = smoothstep(Edge1, Edge2, In);\n\t\t    }\n\t\t    \n\t\t   
      // Node: Lerp\n\t\t    void Unity_Lerp_float4(float4 A, float4 B, float4 T,
      out float4 Out)\n\t\t    {\n\t\t        Out = lerp(A, B, T);\n\t\t    }\n\t\t   
      \n\t\t    // Node: Divide\n\t\t    void Unity_Divide_float2(float2 A, float2
      B, out float2 Out)\n\t\t    {\n\t\t        Out = A / B;\n\t\t    }\n\t\t   
      \n\t\t    // Node: Absolute\n\t\t    void Unity_Absolute_float(float In, out
      float Out)\n\t\t    {\n\t\t        Out = abs(In);\n\t\t    }\n\t\t    \n\t\t   
      // Node: One Minus\n\t\t    void Unity_OneMinus_float(float In, out float Out)\n\t\t   
      {\n\t\t        Out = 1 - In;\n\t\t    }\n\t\t    \n\t\t    // Node: Saturate\n\t\t   
      void Unity_Saturate_float(float In, out float Out)\n\t\t    {\n\t\t       
      Out = saturate(In);\n\t\t    }\n\t\t    \n\t\t    // Node: Power\n\t\t    void
      Unity_Power_float(float A, float B, out float Out)\n\t\t    {\n\t\t       
      Out = pow(A, B);\n\t\t    }\n\t\t    \n\t\t    // Node: Add\n\t\t    void Unity_Add_float4(float4
      A, float4 B, out float4 Out)\n\t\t    {\n\t\t        Out = A + B;\n\t\t   
      }\n\t\t    \n\t\t    // Node: Saturate\n\t\t    void Unity_Saturate_float4(float4
      In, out float4 Out)\n\t\t    {\n\t\t        Out = saturate(In);\n\t\t    }\n\t\t   
      \n\t\t    struct SG_Input_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t    {\n\t\t       
      half4 uv0;\n\t\t        float3 TimeParameters;\n\t\t    };\n\t\t    \n\t\t   
      struct SG_Output_dc37058d10d4ba54fb1aa4beedd149e5\n\t\t    {\n\t\t        float3
      BaseColor_1;\n\t\t        float Metallic_2;\n\t\t        float Smoothness_3;\n\t\t       
      float3 Normal_8;\n\t\t        float3 Emissive_5;\n\t\t        float Alpha_4;\n\t\t       
      float AlphaThreshold_7;\n\t\t    };\n\t\t    \n\t\t    SG_Output_dc37058d10d4ba54fb1aa4beedd149e5
      SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(\n\t\t        SG_Input_dc37058d10d4ba54fb1aa4beedd149e5
      IN,\n\t\t        /* Property: StrokeWidth */ float StrokeWidth,\n\t\t       
      /* Property: StrokeOffset */ float StrokeOffset)\n\t\t    {\n\t\t        //
      Node: Gradient\n\t\t        Gradient _Gradient_DC5A62B4_Out_0 = NewGradient(0,
      4, 2, float4(0.008944447, 0.4335072, 0.6320754, 0),float4(0.1453809, 0.8928534,
      0.9339623, 0.4088197),float4(0.8639421, 0.9829419, 0.9894866, 0.7735256),float4(1,
      1, 1, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0, 0),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0));\n\t\t    \n\t\t        // Node: UV\n\t\t       
      float4 _UV_7B2716DF_Out_0 = IN.uv0;\n\t\t    \n\t\t        // Node: Split\n\t\t       
      float _Split_6781DA13_R_1 = _UV_7B2716DF_Out_0[0];\n\t\t        float _Split_6781DA13_G_2
      = _UV_7B2716DF_Out_0[1];\n\t\t        float _Split_6781DA13_B_3 = _UV_7B2716DF_Out_0[2];\n\t\t       
      float _Split_6781DA13_A_4 = _UV_7B2716DF_Out_0[3];\n\t\t    \n\t\t        //
      Node: Sample Gradient\n\t\t        float4 _SampleGradient_1C3CE499_Out_2;\n\t\t       
      Unity_SampleGradient_float(_Gradient_DC5A62B4_Out_0, _Split_6781DA13_G_2, _SampleGradient_1C3CE499_Out_2);\n\t\t   
      \n\t\t        // Node: Multiply\n\t\t        float4 _Multiply_2A09EA98_Out_2;\n\t\t       
      Unity_Multiply_float(_SampleGradient_1C3CE499_Out_2, _SampleGradient_1C3CE499_Out_2,
      _Multiply_2A09EA98_Out_2);\n\t\t    \n\t\t        // Node: UV\n\t\t       
      float4 _UV_29956EDA_Out_0 = IN.uv0;\n\t\t    \n\t\t        // Node: Flip\n\t\t       
      float4 _Flip_DC627F17_Out_1;\n\t\t        float4 _Flip_DC627F17_Flip = float4
      (1\n\t\t    , 0, 0, 0);    Unity_Flip_float4(_UV_29956EDA_Out_0, _Flip_DC627F17_Flip,
      _Flip_DC627F17_Out_1);\n\t\t    \n\t\t        // Node: Split\n\t\t        float
      _Split_EB43F5F6_R_1 = _Flip_DC627F17_Out_1[0];\n\t\t        float _Split_EB43F5F6_G_2
      = _Flip_DC627F17_Out_1[1];\n\t\t        float _Split_EB43F5F6_B_3 = _Flip_DC627F17_Out_1[2];\n\t\t       
      float _Split_EB43F5F6_A_4 = _Flip_DC627F17_Out_1[3];\n\t\t    \n\t\t       
      // Node: Add\n\t\t        float _Add_FEE6BF5F_Out_2;\n\t\t        Unity_Add_float(_Split_EB43F5F6_R_1,
      1, _Add_FEE6BF5F_Out_2);\n\t\t    \n\t\t        // Node: Vector 3\n\t\t       
      float3 _Vector3_9D63C5B7_Out_0 = float3(_Add_FEE6BF5F_Out_2, _Split_EB43F5F6_G_2,
      _Split_EB43F5F6_B_3);\n\t\t    \n\t\t        // Node: Split\n\t\t        float
      _Split_9B01DC26_R_1 = _UV_29956EDA_Out_0[0];\n\t\t        float _Split_9B01DC26_G_2
      = _UV_29956EDA_Out_0[1];\n\t\t        float _Split_9B01DC26_B_3 = _UV_29956EDA_Out_0[2];\n\t\t       
      float _Split_9B01DC26_A_4 = _UV_29956EDA_Out_0[3];\n\t\t    \n\t\t        //
      Node: Step\n\t\t        float _Step_ADBE7A3A_Out_2;\n\t\t        Unity_Step_float(0.5,
      _Split_9B01DC26_R_1, _Step_ADBE7A3A_Out_2);\n\t\t    \n\t\t        // Node:
      Lerp\n\t\t        float3 _Lerp_F59C9759_Out_3;\n\t\t        Unity_Lerp_float3((_UV_29956EDA_Out_0.xyz),
      _Vector3_9D63C5B7_Out_0, (_Step_ADBE7A3A_Out_2.xxx), _Lerp_F59C9759_Out_3);\n\t\t   
      \n\t\t        // Node: Multiply\n\t\t        float _Multiply_9B4909A9_Out_2;\n\t\t       
      Unity_Multiply_float(IN.TimeParameters.x, -1, _Multiply_9B4909A9_Out_2);\n\t\t   
      \n\t\t        // Node: Vector 2\n\t\t        float2 _Vector2_AF6A7447_Out_0
      = float2(0, _Multiply_9B4909A9_Out_2);\n\t\t    \n\t\t        // Node: Tiling
      And Offset\n\t\t        float2 _TilingAndOffset_4D6AEA38_Out_3;\n\t\t       
      Unity_TilingAndOffset_float((_Lerp_F59C9759_Out_3.xy), float2 (1, 1), _Vector2_AF6A7447_Out_0,
      _TilingAndOffset_4D6AEA38_Out_3);\n\t\t    \n\t\t        // Node: Multiply\n\t\t       
      float _Multiply_C216CA3B_Out_2;\n\t\t        Unity_Multiply_float(IN.TimeParameters.x,
      -5, _Multiply_C216CA3B_Out_2);\n\t\t    \n\t\t        // Node: Voronoi\n\t\t       
      float _Voronoi_A3229C6E_Out_3;\n\t\t        float _Voronoi_A3229C6E_Cells_4;\n\t\t       
      Unity_Voronoi_float((_Lerp_F59C9759_Out_3.xy), _Multiply_C216CA3B_Out_2, 5,
      _Voronoi_A3229C6E_Out_3, _Voronoi_A3229C6E_Cells_4);\n\t\t    \n\t\t       
      // Node: Vector 1\n\t\t        float _Vector1_9C6CFDF9_Out_0 = 0.035;\n\t\t   
      \n\t\t        // Node: Negate\n\t\t        float _Negate_554D4DD_Out_1;\n\t\t       
      Unity_Negate_float(_Vector1_9C6CFDF9_Out_0, _Negate_554D4DD_Out_1);\n\t\t   
      \n\t\t        // Node: Vector 2\n\t\t        float2 _Vector2_7A48EE14_Out_0
      = float2(_Negate_554D4DD_Out_1, _Vector1_9C6CFDF9_Out_0);\n\t\t    \n\t\t       
      // Node: Remap\n\t\t        float _Remap_3910C005_Out_3;\n\t\t        Unity_Remap_float(_Voronoi_A3229C6E_Out_3,
      float2 (0, 1), _Vector2_7A48EE14_Out_0, _Remap_3910C005_Out_3);\n\t\t    \n\t\t       
      // Node: Add\n\t\t        float2 _Add_9E71A24D_Out_2;\n\t\t        Unity_Add_float2(_TilingAndOffset_4D6AEA38_Out_3,
      (_Remap_3910C005_Out_3.xx), _Add_9E71A24D_Out_2);\n\t\t    \n\t\t        //
      Node: Gradient Noise\n\t\t        float _GradientNoise_CE177ECE_Out_2;\n\t\t       
      Unity_GradientNoise_float(_Add_9E71A24D_Out_2, 10, _GradientNoise_CE177ECE_Out_2);\n\t\t   
      \n\t\t        // Node: Smoothstep\n\t\t        float _Smoothstep_9EC171AC_Out_3;\n\t\t       
      Unity_Smoothstep_float(0.09, 0.71, _GradientNoise_CE177ECE_Out_2, _Smoothstep_9EC171AC_Out_3);\n\t\t   
      \n\t\t        // Node: Lerp\n\t\t        float4 _Lerp_D47A5CE8_Out_3;\n\t\t       
      Unity_Lerp_float4(_Multiply_2A09EA98_Out_2, _SampleGradient_1C3CE499_Out_2,
      (_Smoothstep_9EC171AC_Out_3.xxxx), _Lerp_D47A5CE8_Out_3);\n\t\t    \n\t\t       
      // Node: Property\n\t\t        float _Property_F076E404_Out_0 = StrokeOffset;\n\t\t   
      \n\t\t        // Node: Vector 2\n\t\t        float2 _Vector2_AD9AB6D9_Out_0
      = float2(0, _Property_F076E404_Out_0);\n\t\t    \n\t\t        // Node: Tiling
      And Offset\n\t\t        float2 _TilingAndOffset_CD2D9ECD_Out_3;\n\t\t       
      Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), _Vector2_AD9AB6D9_Out_0,
      _TilingAndOffset_CD2D9ECD_Out_3);\n\t\t    \n\t\t        // Node: Property\n\t\t       
      float _Property_2A8A2B0C_Out_0 = StrokeWidth;\n\t\t    \n\t\t        // Node:
      Divide\n\t\t        float2 _Divide_10C4FA36_Out_2;\n\t\t        Unity_Divide_float2(_TilingAndOffset_CD2D9ECD_Out_3,
      (_Property_2A8A2B0C_Out_0.xx), _Divide_10C4FA36_Out_2);\n\t\t    \n\t\t       
      // Node: Split\n\t\t        float _Split_738CB19A_R_1 = _Divide_10C4FA36_Out_2[0];\n\t\t       
      float _Split_738CB19A_G_2 = _Divide_10C4FA36_Out_2[1];\n\t\t        float _Split_738CB19A_B_3
      = 0;\n\t\t        float _Split_738CB19A_A_4 = 0;\n\t\t    \n\t\t        //
      Node: Absolute\n\t\t        float _Absolute_764E0831_Out_1;\n\t\t        Unity_Absolute_float(_Split_738CB19A_G_2,
      _Absolute_764E0831_Out_1);\n\t\t    \n\t\t        // Node: One Minus\n\t\t       
      float _OneMinus_FFACAA97_Out_1;\n\t\t        Unity_OneMinus_float(_Absolute_764E0831_Out_1,
      _OneMinus_FFACAA97_Out_1);\n\t\t    \n\t\t        // Node: Saturate\n\t\t       
      float _Saturate_F999C4A1_Out_1;\n\t\t        Unity_Saturate_float(_OneMinus_FFACAA97_Out_1,
      _Saturate_F999C4A1_Out_1);\n\t\t    \n\t\t        // Node: Power\n\t\t       
      float _Power_D0E8DF9A_Out_2;\n\t\t        Unity_Power_float(_Saturate_F999C4A1_Out_1,
      1.5, _Power_D0E8DF9A_Out_2);\n\t\t    \n\t\t        // Node: Remap\n\t\t       
      float _Remap_F9ADE183_Out_3;\n\t\t        Unity_Remap_float(_GradientNoise_CE177ECE_Out_2,
      float2 (0, 1), float2 (0.5, 1), _Remap_F9ADE183_Out_3);\n\t\t    \n\t\t       
      // Node: Multiply\n\t\t        float _Multiply_4A109137_Out_2;\n\t\t       
      Unity_Multiply_float(_Power_D0E8DF9A_Out_2, _Remap_F9ADE183_Out_3, _Multiply_4A109137_Out_2);\n\t\t   
      \n\t\t        // Node: Saturate\n\t\t        float _Saturate_E7C0BD3F_Out_1;\n\t\t       
      Unity_Saturate_float(_Multiply_4A109137_Out_2, _Saturate_E7C0BD3F_Out_1);\n\t\t   
      \n\t\t        // Node: Gradient\n\t\t        Gradient _Gradient_B50E5DA3_Out_0
      = NewGradient(0, 3, 2, float4(1, 1, 1, 0),float4(1, 1, 1, 0.8088197),float4(0,
      0, 0, 1),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0, 0),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t    \n\t\t       
      // Node: Sample Gradient\n\t\t        float4 _SampleGradient_506BDCEB_Out_2;\n\t\t       
      Unity_SampleGradient_float(_Gradient_B50E5DA3_Out_0, _Split_6781DA13_G_2, _SampleGradient_506BDCEB_Out_2);\n\t\t   
      \n\t\t        // Node: Multiply\n\t\t        float4 _Multiply_41EE5957_Out_2;\n\t\t       
      Unity_Multiply_float((_Saturate_E7C0BD3F_Out_1.xxxx), _SampleGradient_506BDCEB_Out_2,
      _Multiply_41EE5957_Out_2);\n\t\t    \n\t\t        // Node: Gradient\n\t\t       
      Gradient _Gradient_71341E71_Out_0 = NewGradient(0, 2, 2, float4(1, 1, 1, 0.01765469),float4(0,
      0, 0, 0.2264744),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0),float4(0,
      0, 0, 0),float4(0, 0, 0, 0),float4(0, 0, 0, 0), float2(1, 0),float2(1, 1),float2(0,
      0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0),float2(0, 0));\n\t\t   
      \n\t\t        // Node: Sample Gradient\n\t\t        float4 _SampleGradient_B06677CA_Out_2;\n\t\t       
      Unity_SampleGradient_float(_Gradient_71341E71_Out_0, _Split_6781DA13_G_2, _SampleGradient_B06677CA_Out_2);\n\t\t   
      \n\t\t        // Node: Add\n\t\t        float4 _Add_6D7B107F_Out_2;\n\t\t       
      Unity_Add_float4(_Multiply_41EE5957_Out_2, _SampleGradient_B06677CA_Out_2,
      _Add_6D7B107F_Out_2);\n\t\t    \n\t\t        // Node: Saturate\n\t\t       
      float4 _Saturate_D02FC044_Out_1;\n\t\t        Unity_Saturate_float4(_Add_6D7B107F_Out_2,
      _Saturate_D02FC044_Out_1);\n\t\t    \n\t\t        // Visual Effect Master\n\t\t       
      SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUT;\n\t\t        OUT.BaseColor_1
      = (_Lerp_D47A5CE8_Out_3.xyz);\n\t\t        OUT.Metallic_2 = 0.2;\n\t\t       
      OUT.Smoothness_3 = 1;\n\t\t        OUT.Normal_8 = float3 (0, 0, 1);\n\t\t       
      OUT.Emissive_5 = float3(0, 0, 0);\n\t\t        OUT.Alpha_4 = (_Saturate_D02FC044_Out_1).x;\n\t\t       
      OUT.AlphaThreshold_7 = 0.5;\n\t\t        return OUT;\n\t\t    }\n\t\t    \n\n\t\t\n\t\t\t#pragma
      fragment frag\n\t\t\tvoid frag(ps_input i\n\t\t\t, out float4 outColor : SV_Target0\n\t\t#if
      USE_DOUBLE_SIDED\n\t\t\t, bool frontFace : SV_IsFrontFace\n\t\t#endif\n\t\t#if
      WRITE_MOTION_VECTOR_IN_FORWARD\n\t\t\t, out float4 outMotionVector : SV_Target1\n\t\t#endif\n\t\t\t)\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);\n\t\t\t\tVFXTransformPSInputs(i);\n\t\t\t\t\n\t\t\t\t\t\t\t#ifdef
      VFX_VARYING_NORMAL\n\t\t\t\t\t\t\t#if USE_DOUBLE_SIDED\n\t\t\t\t\t\t\tconst
      float faceMul = frontFace ? 1.0f : -1.0f;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tconst
      float faceMul = 1.0f;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfloat3
      normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);\n\t\t\t\t\t\t\tconst
      VFXUVData uvData = GetUVData(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_TANGENT\n\t\t\t\t\t\t\tfloat3
      tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);\n\t\t\t\t\t\t\tfloat3 bitangentWS
      = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);\n\t\t\t\t\t\t\tfloat3x3
      tbn = float3x3(tangentWS,bitangentWS,normalWS);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#if
      USE_NORMAL_MAP\n\t\t\t\t\t\t\tfloat3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);\n\t\t\t\t\t\t\tfloat
      normalScale = 1.0f;\n\t\t\t\t\t\t\t#ifdef VFX_VARYING_NORMALSCALE\n\t\t\t\t\t\t\tnormalScale
      = i.VFX_VARYING_NORMALSCALE;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tnormalWS
      = normalize(lerp(normalWS,mul(n,tbn),normalScale));\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\n\t\t       
      \n\t\t        #ifdef VFX_SHADERGRAPH\n\t\t            float StrokeWidth = i.StrokeWidth;float
      StrokeOffset = i.StrokeOffset;\n\t\t            //Call Shader Graph\n\t\t           
      SG_Input_dc37058d10d4ba54fb1aa4beedd149e5 INSG = (SG_Input_dc37058d10d4ba54fb1aa4beedd149e5)0;\n\t\t           
      INSG.uv0.xy = i.uv;\n\t\t            INSG.TimeParameters = _TimeParameters.xyz;\n\t\t           
      \n\t\t            SG_Output_dc37058d10d4ba54fb1aa4beedd149e5 OUTSG = SG_Evaluate_dc37058d10d4ba54fb1aa4beedd149e5(INSG,StrokeWidth,
      StrokeOffset);\n\t\t            #if (USE_ALPHA_TEST || WRITE_MOTION_VECTOR_IN_FORWARD)
      && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t            i.VFX_VARYING_ALPHATHRESHOLD
      = OUTSG.AlphaThreshold_7;\n\t\t            #endif\n\t\t            \n\n\t\t           
      \n\t\t            SurfaceData surface;\n\t\t            BuiltinData builtin;\n\t\t           
      surface = (SurfaceData)0;\n\t\t            builtin = (BuiltinData)0;\n\t\t           
      \n\t\t            surface.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;\n\t\t           
      surface.specularOcclusion = 1.0f;\n\t\t            surface.ambientOcclusion
      = 1.0f;\n\t\t            surface.subsurfaceMask = 1.0f;\n\t\t            \n\t\t           
      #if HAS_SHADERGRAPH_PARAM_ALPHA\n\t\t                builtin.opacity = OUTSG.Alpha_4;\n\t\t               
      VFXClipFragmentColor(builtin.opacity,i);\n\t\t            #endif\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_SMOOTHNESS\n\t\t               
      surface.perceptualSmoothness = OUTSG.Smoothness_3;\n\t\t            #endif\n\t\t           
      #if HAS_SHADERGRAPH_PARAM_METALLIC\n\t\t                surface.metallic =
      OUTSG.Metallic_2;\n\t\t            #endif\n\t\t            #if HAS_SHADERGRAPH_PARAM_BASECOLOR\n\t\t               
      surface.baseColor = OUTSG.BaseColor_1;\n\t\t            #endif\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_NORMAL\n\t\t                float3
      n =  OUTSG.Normal_8;\n\t\t                normalWS = mul(n,tbn);\n\t\t           
      #endif\n\t\t            \n\t\t            surface.normalWS = normalWS;\n\t\t           
      \n\t\t            #if HAS_SHADERGRAPH_PARAM_EMISSIVE\n\t\t                builtin.emissiveColor
      = OUTSG.Emissive_5;\n\t\t            #endif\n\t\t\n\t\t            \n\t\t           
      outColor = VFXGetPixelOutputForwardShaderGraph(surface, builtin,i);\n\t\t       
      #else\n\t\t            outColor = VFXGetPixelOutputForward(i,normalWS,uvData);\n\t\t       
      #endif\n\t\t\t\t\n\t\t\t\t#if WRITE_MOTION_VECTOR_IN_FORWARD\n\t\t\t\t\t\n\t\t\t\t\t\t\tfloat2
      velocity = (i.VFX_VARYING_VELOCITY_CPOS.xy/i.VFX_VARYING_VELOCITY_CPOS.w) -
      (i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.xy/i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.w);\n\t\t\t\t\t\t\t#if
      UNITY_UV_STARTS_AT_TOP\n\t\t\t\t\t\t\t\tvelocity.y = -velocity.y;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tfloat4
      encodedMotionVector = 0.0f;\n\t\t\t\t\t\t\tVFXEncodeMotionVector(velocity *
      0.5f, encodedMotionVector);\n\t\t\t\t\t\t\t\n\t\t\t\t\toutMotionVector = encodedMotionVector;\n\t\t\t\t\toutMotionVector.a
      = outColor.a < i.VFX_VARYING_ALPHATHRESHOLD ? 0.0f : 1.0f; //Independant clipping
      for motion vector pass\n\t\t\t\t#endif\n\t\t\t}\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\r\n\t\t\r\n\t}\r\n}\r\n"
  m_Infos:
    m_Expressions:
      m_Expressions:
      - op: 1
        valueIndex: 0
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 1
        valueIndex: 1
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 2
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 56
        valueIndex: 3
        data[0]: 0
        data[1]: -1
        data[2]: -1
        data[3]: 0
      - op: 1
        valueIndex: 7
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 8
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 1
        valueIndex: 11
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 1
        valueIndex: 14
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 15
      - op: 1
        valueIndex: 15
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 6
      - op: 1
        valueIndex: 16
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 3
        valueIndex: 17
        data[0]: 1
        data[1]: 1
        data[2]: 1
        data[3]: -1
      - op: 1
        valueIndex: 20
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 1
        valueIndex: 23
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 6
        valueIndex: 26
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: -1
      - op: 56
        valueIndex: 27
        data[0]: 2
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 31
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      m_NeedsLocalToWorld: 0
      m_NeedsWorldToLocal: 0
      m_NeededMainCameraBuffers: 0
    m_PropertySheet:
      m_Float:
        m_Array:
        - m_ExpressionIndex: 1
          m_Value: 4
        - m_ExpressionIndex: 4
          m_Value: 5
        - m_ExpressionIndex: 9
          m_Value: 1.5
        - m_ExpressionIndex: 15
          m_Value: 0.5
      m_Vector2f:
        m_Array: []
      m_Vector3f:
        m_Array:
        - m_ExpressionIndex: 5
          m_Value: {x: 0, y: 1, z: 0}
        - m_ExpressionIndex: 6
          m_Value: {x: 2, y: 3, z: 2}
        - m_ExpressionIndex: 11
          m_Value: {x: 0, y: 270, z: 0}
        - m_ExpressionIndex: 12
          m_Value: {x: 0, y: 0, z: 0}
      m_Vector4f:
        m_Array: []
      m_Uint:
        m_Array:
        - m_ExpressionIndex: 8
          m_Value: 4294967295
      m_Int:
        m_Array: []
      m_Matrix4x4f:
        m_Array: []
      m_AnimationCurve:
        m_Array:
        - m_ExpressionIndex: 0
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: -0.0023584366
              inSlope: -1.5278585
              outSlope: -1.5278585
              tangentMode: 34
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1
              value: -1.5302169
              inSlope: -1.5278585
              outSlope: -1.5278585
              tangentMode: 34
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
        - m_ExpressionIndex: 2
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: 0.5802002
              inSlope: 8.019597
              outSlope: 8.019597
              tangentMode: 34
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.17173757
              value: 1.9574662
              inSlope: 2.6806686
              outSlope: 2.6806686
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.3546977
              value: 1.968217
              inSlope: -1.0221239
              outSlope: -1.0221239
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1
              value: 1
              inSlope: -1.5004084
              outSlope: -1.5004084
              tangentMode: 34
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
      m_Gradient:
        m_Array: []
      m_NamedObject:
        m_Array:
        - m_ExpressionIndex: 7
          m_Value: {fileID: 2534964839176971238, guid: 16afa4ed23ef80948ad618d18473b664,
            type: 3}
      m_Bool:
        m_Array: []
    m_ExposedExpressions:
    - nameId: Scale
      index: 1
    m_Buffers:
    - type: 1
      size: 288
      layout:
      - name: lifetime
        type: 1
        offset:
          bucket: 0
          structure: 1
          element: 0
      - name: scaleX
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 0
      - name: scaleY
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 1
      - name: scaleZ
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 2
      - name: angleX
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 3
      - name: angleY
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 4
      - name: angleZ
        type: 1
        offset:
          bucket: 32
          structure: 6
          element: 5
      - name: alive
        type: 17
        offset:
          bucket: 224
          structure: 2
          element: 0
      - name: age
        type: 1
        offset:
          bucket: 224
          structure: 2
          element: 1
      capacity: 32
      stride: 4
    - type: 1
      size: 1
      layout:
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 1
          element: 0
      capacity: 1
      stride: 4
    - type: 4
      size: 32
      layout: []
      capacity: 0
      stride: 4
    - type: 1
      size: 1
      layout: []
      capacity: 0
      stride: 4
    m_TemporaryBuffers: []
    m_CPUBuffers:
    - capacity: 1
      stride: 1
      layout:
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 1
          element: 0
      initialData:
        data: 00000000
    - capacity: 1
      stride: 1
      layout:
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 1
          element: 0
      initialData:
        data: 00000000
    m_Events:
    - name: OnPlay
      playSystems: 00000000
      stopSystems: 
    - name: OnStop
      playSystems: 
      stopSystems: 00000000
    m_RuntimeVersion: 10
    m_RendererSettings:
      motionVectorGenerationMode: 0
      shadowCastingMode: 0
      receiveShadows: 0
      reflectionProbeUsage: 0
      lightProbeUsage: 0
    m_CullingFlags: 3
    m_UpdateMode: 0
    m_PreWarmDeltaTime: 0.05
    m_PreWarmStepCount: 0
    m_InitialEventName: OnPlay
  m_Systems:
  - type: 0
    flags: 0
    capacity: 0
    layer: 4294967295
    buffers:
    - nameId: spawner_output
      index: 1
    values: []
    tasks:
    - type: 268435456
      buffers: []
      temporaryBuffers: []
      values:
      - nameId: Rate
        index: 4
      params: []
      processor: {fileID: 0}
      shaderSourceIndex: -1
  - type: 1
    flags: 1
    capacity: 32
    layer: 4294967295
    buffers:
    - nameId: attributeBuffer
      index: 0
    - nameId: sourceAttributeBuffer
      index: 1
    - nameId: deadList
      index: 2
    - nameId: deadListCount
      index: 3
    - nameId: spawner_input
      index: 1
    values:
    - nameId: bounds_center
      index: 5
    - nameId: bounds_size
      index: 6
    tasks:
    - type: 536870912
      buffers:
      - nameId: attributeBuffer
        index: 0
      - nameId: deadListIn
        index: 2
      - nameId: deadListCount
        index: 3
      - nameId: sourceAttributeBuffer
        index: 1
      temporaryBuffers: []
      values:
      - nameId: Scale_b
        index: 10
      params:
      - nameId: bounds_center
        index: 5
      - nameId: bounds_size
        index: 6
      processor: {fileID: 0}
      shaderSourceIndex: 0
    - type: 805306368
      buffers:
      - nameId: attributeBuffer
        index: 0
      - nameId: deadListOut
        index: 2
      temporaryBuffers: []
      values:
      - nameId: deltaTime_a
        index: 13
      params: []
      processor: {fileID: 0}
      shaderSourceIndex: 1
    - type: 1073741828
      buffers:
      - nameId: attributeBuffer
        index: 0
      temporaryBuffers: []
      values:
      - nameId: Size_a
        index: 14
      - nameId: uniform_a
        index: 3
      params:
      - nameId: mesh
        index: 7
      - nameId: subMeshMask
        index: 8
      - nameId: sortPriority
        index: 0
      processor: {fileID: 0}
      shaderSourceIndex: 2
--- !u!114 &8926484042661614555
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 73a13919d81fb7444849bae8b5c812a2, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children:
  - {fileID: 8926484042661614556}
  m_UIPosition: {x: 941.2763, y: -132.6938}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots: []
  m_OutputSlots: []
  m_Label: 
  m_Data: {fileID: 0}
  m_InputFlowSlot:
  - link: []
  - link: []
  m_OutputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614558}
      slotIndex: 0
  loopDuration: 0
  loopCount: 0
  delayBeforeLoop: 0
  delayAfterLoop: 0
--- !u!114 &8926484042661614556
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f05c6884b705ce14d82ae720f0ec209f, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614555}
  m_Children: []
  m_UIPosition: {x: 233.38269, y: 57.572144}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614557}
  m_OutputSlots: []
  m_Disabled: 0
--- !u!114 &8926484042661614557
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614557}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614556}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 5
    m_Space: 2147483647
  m_Property:
    name: Rate
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes:
    - m_Type: 1
      m_Min: 0
      m_Max: Infinity
      m_Tooltip: 
      m_Regex: 
      m_RegexMaxLength: 0
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Sets the number of particles to be spawned per second.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614558
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 9dfea48843f53fc438eabc12a3a30abc, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children:
  - {fileID: 8926484042661614580}
  - {fileID: 8926484042661614601}
  - {fileID: 8926484042661614664}
  m_UIPosition: {x: 941.3827, y: 114.57214}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614559}
  m_OutputSlots: []
  m_Label: 
  m_Data: {fileID: 8926484042661614568}
  m_InputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614555}
      slotIndex: 0
  m_OutputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614583}
      slotIndex: 0
--- !u!114 &8926484042661614559
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1b605c022ee79394a8a776c0869b3f9a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614560}
  - {fileID: 8926484042661614564}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614558}
    m_Value:
      m_Type:
        m_SerializableType: UnityEditor.VFX.AABox, Unity.VisualEffectGraph.Editor,
          Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"center":{"x":0.0,"y":1.0,"z":0.0},"size":{"x":2.0,"y":3.0,"z":2.0}}'
    m_Space: 0
  m_Property:
    name: bounds
    m_serializedType:
      m_SerializableType: UnityEditor.VFX.AABox, Unity.VisualEffectGraph.Editor,
        Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: The culling bounds of this system. The Visual Effect is only visible
        if the bounding box specified here is visible to the camera.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614560
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614559}
  m_Children:
  - {fileID: 8926484042661614561}
  - {fileID: 8926484042661614562}
  - {fileID: 8926484042661614563}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: center
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Sets the center of the box.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614561
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614560}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614562
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614560}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614563
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614560}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614564
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614559}
  m_Children:
  - {fileID: 8926484042661614565}
  - {fileID: 8926484042661614566}
  - {fileID: 8926484042661614567}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: size
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Sets the size of the box along each axis.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614565
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614564}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614566
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614564}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614567
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614564}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614559}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614568
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: d78581a96eae8bf4398c282eb0b098bd, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  title: 
  m_Owners:
  - {fileID: 8926484042661614558}
  - {fileID: 8926484042661614583}
  - {fileID: 8926484042661614615}
  dataType: 0
  capacity: 32
  stripCapacity: 16
  particlePerStripCount: 16
  m_Space: 0
--- !u!114 &8926484042661614580
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: a971fa2e110a0ac42ac1d8dae408704b, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614558}
  m_Children: []
  m_UIPosition: {x: 233.38269, y: 57.572144}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614663}
  m_OutputSlots: []
  m_Disabled: 0
  attribute: lifetime
  Composition: 0
  Source: 0
  Random: 0
  channels: 6
--- !u!114 &8926484042661614583
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 2dc095764ededfa4bb32fa602511ea4b, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 942, y: 730}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots: []
  m_OutputSlots: []
  m_Label: 
  m_Data: {fileID: 8926484042661614568}
  m_InputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614558}
      slotIndex: 0
  m_OutputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614615}
      slotIndex: 0
  integration: 0
  angularIntegration: 0
  ageParticles: 1
  reapParticles: 1
--- !u!114 &8926484042661614601
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: a971fa2e110a0ac42ac1d8dae408704b, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614558}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614602}
  m_OutputSlots: []
  m_Disabled: 0
  attribute: scale
  Composition: 0
  Source: 0
  Random: 0
  channels: 6
--- !u!114 &8926484042661614602
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614603}
  - {fileID: 8926484042661614604}
  - {fileID: 8926484042661614605}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614602}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614601}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"x":1.0,"y":1.0,"z":1.0}'
    m_Space: 2147483647
  m_Property:
    name: Scale
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes: []
  m_Direction: 0
  m_LinkedSlots:
  - {fileID: 8926484042661614614}
--- !u!114 &8926484042661614603
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614602}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614602}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614604
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614602}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614602}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614605
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614602}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614602}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614613
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 330e0fca1717dde4aaa144f48232aa64, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots: []
  m_OutputSlots:
  - {fileID: 8926484042661614614}
  m_ExposedName: Scale
  m_Exposed: 1
  m_Order: 0
  m_Category: 
  m_Min:
    m_Type:
      m_SerializableType: 
    m_SerializableObject: 
  m_Max:
    m_Type:
      m_SerializableType: 
    m_SerializableObject: 
  m_IsOutput: 0
  m_Tooltip: 
  m_Nodes:
  - m_Id: 0
    linkedSlots:
    - outputSlot: {fileID: 8926484042661614614}
      inputSlot: {fileID: 8926484042661614602}
    position: {x: 756, y: 386}
    expandedSlots: []
    expanded: 0
--- !u!114 &8926484042661614614
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614614}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614613}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 4
    m_Space: 2147483647
  m_Property:
    name: o
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 1
  m_LinkedSlots:
  - {fileID: 8926484042661614602}
--- !u!114 &8926484042661614615
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c6841bdef989b6d408d7298703cfde75, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children:
  - {fileID: 8926484042661614677}
  m_UIPosition: {x: 943, y: 905}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614616}
  - {fileID: 8926484042661614617}
  - {fileID: 8926484042661614623}
  - {fileID: 8926484042661614624}
  m_OutputSlots: []
  m_Label: 
  m_Data: {fileID: 8926484042661614568}
  m_InputFlowSlot:
  - link:
    - context: {fileID: 8926484042661614583}
      slotIndex: 0
  m_OutputFlowSlot:
  - link: []
  blendMode: 3
  useAlphaClipping: 0
  generateMotionVector: 0
  m_SubOutputs:
  - {fileID: 8926484042661614622}
  cullMode: 0
  zWriteMode: 0
  zTestMode: 0
  colorMapping: 0
  uvMode: 0
  useSoftParticle: 0
  sortPriority: 0
  sort: 0
  indirectDraw: 0
  castShadows: 0
  useExposureWeight: 0
  shaderGraph: {fileID: -5475051401550479605, guid: dc37058d10d4ba54fb1aa4beedd149e5,
    type: 3}
  shadergraphGUID: dc37058d10d4ba54fb1aa4beedd149e5
  materialType: 0
  onlyAmbientLighting: 0
  diffusionProfileAsset: {fileID: 0}
  multiplyThicknessWithAlpha: 0
  useBaseColorMap: 3
  useMaskMap: 0
  useNormalMap: 0
  useEmissiveMap: 0
  colorMode: 1
  useEmissive: 0
  doubleSided: 0
  preserveSpecularLighting: 0
  enableShadows: 1
  enableSpecular: 1
  enableCookie: 1
  enableEnvLight: 1
--- !u!114 &8926484042661614616
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b47b8679b468b7347a00cdd50589bc9f, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614616}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614615}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.Mesh, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"obj":{"fileID":2534964839176971238,"guid":"16afa4ed23ef80948ad618d18473b664","type":3}}'
    m_Space: 2147483647
  m_Property:
    name: mesh
    m_serializedType:
      m_SerializableType: UnityEngine.Mesh, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Specifies the mesh used to render the particle.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614617
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c52d920e7fff73b498050a6b3c4404ca, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614617}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614615}
    m_Value:
      m_Type:
        m_SerializableType: System.UInt32, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 4294967295
    m_Space: 2147483647
  m_Property:
    name: subMeshMask
    m_serializedType:
      m_SerializableType: System.UInt32, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Defines a bitmask to control which submeshes are rendered.
      m_Regex: 
      m_RegexMaxLength: 0
    - m_Type: 8
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: 
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614622
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 081ffb0090424ba4cb05370a42ead6b9, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  opaqueRenderQueue: 0
  transparentRenderQueue: 1
--- !u!114 &8926484042661614623
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614623}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614615}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 0.5
    m_Space: 2147483647
  m_Property:
    name: StrokeWidth
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614624
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614624}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614615}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 0
    m_Space: 2147483647
  m_Property:
    name: StrokeOffset
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots:
  - {fileID: 8926484042661614662}
--- !u!114 &8926484042661614625
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ba941214d319b454f90d5480e85886f2, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 459, y: 948}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots: []
  m_OutputSlots:
  - {fileID: 8926484042661614626}
--- !u!114 &8926484042661614626
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614626}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614625}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 0
    m_Space: 2147483647
  m_Property:
    name: t
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 1
  m_LinkedSlots:
  - {fileID: 8926484042661614661}
--- !u!114 &8926484042661614659
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f8bcc906a6d398c46b18826714448709, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 702, y: 945}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614660}
  - {fileID: 8926484042661614661}
  m_OutputSlots:
  - {fileID: 8926484042661614662}
--- !u!114 &8926484042661614660
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c117b74c5c58db542bffe25c78fe92db, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614660}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614659}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"frames":[{"time":0.0,"value":-0.0023584365844726564,"inTangent":-1.5278584957122803,"outTangent":-1.5278584957122803,"tangentMode":0,"leftTangentMode":1,"rightTangentMode":1,"broken":false},{"time":1.0,"value":-1.530216932296753,"inTangent":-1.5278584957122803,"outTangent":-1.5278584957122803,"tangentMode":0,"leftTangentMode":1,"rightTangentMode":1,"broken":false}],"preWrapMode":8,"postWrapMode":8,"version":1}'
    m_Space: 2147483647
  m_Property:
    name: curve
    m_serializedType:
      m_SerializableType: UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Sets the curve to sample from.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614661
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614661}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614659}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 0
    m_Space: 2147483647
  m_Property:
    name: time
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Sets the time along the curve to take a sample from.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots:
  - {fileID: 8926484042661614626}
--- !u!114 &8926484042661614662
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614662}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614659}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 0
    m_Space: 2147483647
  m_Property:
    name: s
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: Outputs the sampled value from the curve at the specified time.
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 1
  m_LinkedSlots:
  - {fileID: 8926484042661614624}
--- !u!114 &8926484042661614663
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614663}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614580}
    m_Value:
      m_Type:
        m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
          PublicKeyToken=b77a5c561934e089
      m_SerializableObject: 1.5
    m_Space: 2147483647
  m_Property:
    name: Lifetime
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes:
    - m_Type: 3
      m_Min: -Infinity
      m_Max: Infinity
      m_Tooltip: "Indicates how long the particle can stay alive. If the particle\u2019s
        age exceeds its lifetime, the particle is destroyed."
      m_Regex: 
      m_RegexMaxLength: 0
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614664
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: a971fa2e110a0ac42ac1d8dae408704b, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614558}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614679}
  - {fileID: 8926484042661614683}
  m_OutputSlots: []
  m_Disabled: 0
  attribute: angle
  Composition: 1
  Source: 0
  Random: 2
  channels: 6
--- !u!114 &8926484042661614665
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614666}
  - {fileID: 8926484042661614667}
  - {fileID: 8926484042661614668}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614665}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"x":0.0,"y":270.0,"z":0.0}'
    m_Space: 2147483647
  m_Property:
    name: Angle
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614666
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614665}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614665}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614667
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614665}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614665}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614668
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614665}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614665}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614677
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 01ec2c1930009b04ea08905b47262415, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614615}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots:
  - {fileID: 8926484042661614678}
  m_OutputSlots: []
  m_Disabled: 0
  attribute: size
  Composition: 2
  AlphaComposition: 0
  SampleMode: 0
  Mode: 1
  ColorMode: 3
  channels: 6
--- !u!114 &8926484042661614678
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c117b74c5c58db542bffe25c78fe92db, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614678}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614677}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"frames":[{"time":0.0,"value":0.5802001953125,"inTangent":8.019597053527832,"outTangent":8.019597053527832,"tangentMode":0,"leftTangentMode":1,"rightTangentMode":1,"broken":false},{"time":0.17173756659030915,"value":1.9574662446975709,"inTangent":2.680668592453003,"outTangent":2.680668592453003,"tangentMode":0,"leftTangentMode":0,"rightTangentMode":0,"broken":false},{"time":0.35469770431518557,"value":1.9682170152664185,"inTangent":-1.02212393283844,"outTangent":-1.02212393283844,"tangentMode":0,"leftTangentMode":0,"rightTangentMode":0,"broken":false},{"time":1.0,"value":1.0,"inTangent":-1.500408411026001,"outTangent":-1.500408411026001,"tangentMode":0,"leftTangentMode":1,"rightTangentMode":1,"broken":false}],"preWrapMode":8,"postWrapMode":8,"version":1}'
    m_Space: 2147483647
  m_Property:
    name: Size
    m_serializedType:
      m_SerializableType: UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614679
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614680}
  - {fileID: 8926484042661614681}
  - {fileID: 8926484042661614682}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614679}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614664}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"x":0.0,"y":270.0,"z":0.0}'
    m_Space: 2147483647
  m_Property:
    name: A
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614680
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614679}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614679}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614681
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614679}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614679}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614682
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614679}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614679}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614683
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ac39bd03fca81b849929b9c966f1836a, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614684}
  - {fileID: 8926484042661614685}
  - {fileID: 8926484042661614686}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614683}
  m_MasterData:
    m_Owner: {fileID: 8926484042661614664}
    m_Value:
      m_Type:
        m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
          Culture=neutral, PublicKeyToken=null
      m_SerializableObject: '{"x":0.0,"y":0.0,"z":0.0}'
    m_Space: 2147483647
  m_Property:
    name: B
    m_serializedType:
      m_SerializableType: UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0,
        Culture=neutral, PublicKeyToken=null
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614684
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614683}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614683}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: x
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614685
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614683}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614683}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: y
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
--- !u!114 &8926484042661614686
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f780aa281814f9842a7c076d436932e7, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 8926484042661614683}
  m_Children: []
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_MasterSlot: {fileID: 8926484042661614683}
  m_MasterData:
    m_Owner: {fileID: 0}
    m_Value:
      m_Type:
        m_SerializableType: 
      m_SerializableObject: 
    m_Space: 2147483647
  m_Property:
    name: z
    m_serializedType:
      m_SerializableType: System.Single, mscorlib, Version=4.0.0.0, Culture=neutral,
        PublicKeyToken=b77a5c561934e089
    attributes: []
  m_Direction: 0
  m_LinkedSlots: []
